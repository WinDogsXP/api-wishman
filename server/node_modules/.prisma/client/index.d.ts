
/**
 * Client
**/

import * as runtime from '@prisma/client/runtime/library.js';
import $Types = runtime.Types // general types
import $Public = runtime.Types.Public
import $Utils = runtime.Types.Utils
import $Extensions = runtime.Types.Extensions
import $Result = runtime.Types.Result

export type PrismaPromise<T> = $Public.PrismaPromise<T>


/**
 * Model Dev
 * 
 */
export type Dev = $Result.DefaultSelection<Prisma.$DevPayload>
/**
 * Model App
 * 
 */
export type App = $Result.DefaultSelection<Prisma.$AppPayload>
/**
 * Model Endpoint
 * 
 */
export type Endpoint = $Result.DefaultSelection<Prisma.$EndpointPayload>
/**
 * Model EndpointCall
 * 
 */
export type EndpointCall = $Result.DefaultSelection<Prisma.$EndpointCallPayload>
/**
 * Model BugReport
 * 
 */
export type BugReport = $Result.DefaultSelection<Prisma.$BugReportPayload>

/**
 * ##  Prisma Client ʲˢ
 * 
 * Type-safe database client for TypeScript & Node.js
 * @example
 * ```
 * const prisma = new PrismaClient()
 * // Fetch zero or more Devs
 * const devs = await prisma.dev.findMany()
 * ```
 *
 * 
 * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
 */
export class PrismaClient<
  T extends Prisma.PrismaClientOptions = Prisma.PrismaClientOptions,
  U = 'log' extends keyof T ? T['log'] extends Array<Prisma.LogLevel | Prisma.LogDefinition> ? Prisma.GetEvents<T['log']> : never : never,
  ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs
> {
  [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['other'] }

    /**
   * ##  Prisma Client ʲˢ
   * 
   * Type-safe database client for TypeScript & Node.js
   * @example
   * ```
   * const prisma = new PrismaClient()
   * // Fetch zero or more Devs
   * const devs = await prisma.dev.findMany()
   * ```
   *
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
   */

  constructor(optionsArg ?: Prisma.Subset<T, Prisma.PrismaClientOptions>);
  $on<V extends U>(eventType: V, callback: (event: V extends 'query' ? Prisma.QueryEvent : Prisma.LogEvent) => void): void;

  /**
   * Connect with the database
   */
  $connect(): $Utils.JsPromise<void>;

  /**
   * Disconnect from the database
   */
  $disconnect(): $Utils.JsPromise<void>;

  /**
   * Add a middleware
   * @deprecated since 4.16.0. For new code, prefer client extensions instead.
   * @see https://pris.ly/d/extensions
   */
  $use(cb: Prisma.Middleware): void

/**
   * Executes a prepared raw query and returns the number of affected rows.
   * @example
   * ```
   * const result = await prisma.$executeRaw`UPDATE User SET cool = ${true} WHERE email = ${'user@email.com'};`
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): Prisma.PrismaPromise<number>;

  /**
   * Executes a raw query and returns the number of affected rows.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$executeRawUnsafe('UPDATE User SET cool = $1 WHERE email = $2 ;', true, 'user@email.com')
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRawUnsafe<T = unknown>(query: string, ...values: any[]): Prisma.PrismaPromise<number>;

  /**
   * Performs a prepared raw query and returns the `SELECT` data.
   * @example
   * ```
   * const result = await prisma.$queryRaw`SELECT * FROM User WHERE id = ${1} OR email = ${'user@email.com'};`
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): Prisma.PrismaPromise<T>;

  /**
   * Performs a raw query and returns the `SELECT` data.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$queryRawUnsafe('SELECT * FROM User WHERE id = $1 OR email = $2;', 1, 'user@email.com')
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRawUnsafe<T = unknown>(query: string, ...values: any[]): Prisma.PrismaPromise<T>;

  /**
   * Allows the running of a sequence of read/write operations that are guaranteed to either succeed or fail as a whole.
   * @example
   * ```
   * const [george, bob, alice] = await prisma.$transaction([
   *   prisma.user.create({ data: { name: 'George' } }),
   *   prisma.user.create({ data: { name: 'Bob' } }),
   *   prisma.user.create({ data: { name: 'Alice' } }),
   * ])
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/concepts/components/prisma-client/transactions).
   */
  $transaction<P extends Prisma.PrismaPromise<any>[]>(arg: [...P], options?: { isolationLevel?: Prisma.TransactionIsolationLevel }): $Utils.JsPromise<runtime.Types.Utils.UnwrapTuple<P>>

  $transaction<R>(fn: (prisma: Omit<PrismaClient, runtime.ITXClientDenyList>) => $Utils.JsPromise<R>, options?: { maxWait?: number, timeout?: number, isolationLevel?: Prisma.TransactionIsolationLevel }): $Utils.JsPromise<R>


  $extends: $Extensions.ExtendsHook<'extends', Prisma.TypeMapCb, ExtArgs>

      /**
   * `prisma.dev`: Exposes CRUD operations for the **Dev** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Devs
    * const devs = await prisma.dev.findMany()
    * ```
    */
  get dev(): Prisma.DevDelegate<ExtArgs>;

  /**
   * `prisma.app`: Exposes CRUD operations for the **App** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Apps
    * const apps = await prisma.app.findMany()
    * ```
    */
  get app(): Prisma.AppDelegate<ExtArgs>;

  /**
   * `prisma.endpoint`: Exposes CRUD operations for the **Endpoint** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Endpoints
    * const endpoints = await prisma.endpoint.findMany()
    * ```
    */
  get endpoint(): Prisma.EndpointDelegate<ExtArgs>;

  /**
   * `prisma.endpointCall`: Exposes CRUD operations for the **EndpointCall** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more EndpointCalls
    * const endpointCalls = await prisma.endpointCall.findMany()
    * ```
    */
  get endpointCall(): Prisma.EndpointCallDelegate<ExtArgs>;

  /**
   * `prisma.bugReport`: Exposes CRUD operations for the **BugReport** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more BugReports
    * const bugReports = await prisma.bugReport.findMany()
    * ```
    */
  get bugReport(): Prisma.BugReportDelegate<ExtArgs>;
}

export namespace Prisma {
  export import DMMF = runtime.DMMF

  export type PrismaPromise<T> = $Public.PrismaPromise<T>

  /**
   * Validator
   */
  export import validator = runtime.Public.validator

  /**
   * Prisma Errors
   */
  export import PrismaClientKnownRequestError = runtime.PrismaClientKnownRequestError
  export import PrismaClientUnknownRequestError = runtime.PrismaClientUnknownRequestError
  export import PrismaClientRustPanicError = runtime.PrismaClientRustPanicError
  export import PrismaClientInitializationError = runtime.PrismaClientInitializationError
  export import PrismaClientValidationError = runtime.PrismaClientValidationError
  export import NotFoundError = runtime.NotFoundError

  /**
   * Re-export of sql-template-tag
   */
  export import sql = runtime.sqltag
  export import empty = runtime.empty
  export import join = runtime.join
  export import raw = runtime.raw
  export import Sql = runtime.Sql

  /**
   * Decimal.js
   */
  export import Decimal = runtime.Decimal

  export type DecimalJsLike = runtime.DecimalJsLike

  /**
   * Metrics 
   */
  export type Metrics = runtime.Metrics
  export type Metric<T> = runtime.Metric<T>
  export type MetricHistogram = runtime.MetricHistogram
  export type MetricHistogramBucket = runtime.MetricHistogramBucket

  /**
  * Extensions
  */
  export import Extension = $Extensions.UserArgs
  export import getExtensionContext = runtime.Extensions.getExtensionContext
  export import Args = $Public.Args
  export import Payload = $Public.Payload
  export import Result = $Public.Result
  export import Exact = $Public.Exact

  /**
   * Prisma Client JS version: 5.12.1
   * Query Engine version: 473ed3124229e22d881cb7addf559799debae1ab
   */
  export type PrismaVersion = {
    client: string
  }

  export const prismaVersion: PrismaVersion 

  /**
   * Utility Types
   */

  /**
   * From https://github.com/sindresorhus/type-fest/
   * Matches a JSON object.
   * This type can be useful to enforce some input to be JSON-compatible or as a super-type to be extended from. 
   */
  export type JsonObject = {[Key in string]?: JsonValue}

  /**
   * From https://github.com/sindresorhus/type-fest/
   * Matches a JSON array.
   */
  export interface JsonArray extends Array<JsonValue> {}

  /**
   * From https://github.com/sindresorhus/type-fest/
   * Matches any valid JSON value.
   */
  export type JsonValue = string | number | boolean | JsonObject | JsonArray | null

  /**
   * Matches a JSON object.
   * Unlike `JsonObject`, this type allows undefined and read-only properties.
   */
  export type InputJsonObject = {readonly [Key in string]?: InputJsonValue | null}

  /**
   * Matches a JSON array.
   * Unlike `JsonArray`, readonly arrays are assignable to this type.
   */
  export interface InputJsonArray extends ReadonlyArray<InputJsonValue | null> {}

  /**
   * Matches any valid value that can be used as an input for operations like
   * create and update as the value of a JSON field. Unlike `JsonValue`, this
   * type allows read-only arrays and read-only object properties and disallows
   * `null` at the top level.
   *
   * `null` cannot be used as the value of a JSON field because its meaning
   * would be ambiguous. Use `Prisma.JsonNull` to store the JSON null value or
   * `Prisma.DbNull` to clear the JSON value and set the field to the database
   * NULL value instead.
   *
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-by-null-values
   */
  export type InputJsonValue = string | number | boolean | InputJsonObject | InputJsonArray | { toJSON(): unknown }

  /**
   * Types of the values used to represent different kinds of `null` values when working with JSON fields.
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  namespace NullTypes {
    /**
    * Type of `Prisma.DbNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.DbNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class DbNull {
      private DbNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.JsonNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.JsonNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class JsonNull {
      private JsonNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.AnyNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.AnyNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class AnyNull {
      private AnyNull: never
      private constructor()
    }
  }

  /**
   * Helper for filtering JSON entries that have `null` on the database (empty on the db)
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const DbNull: NullTypes.DbNull

  /**
   * Helper for filtering JSON entries that have JSON `null` values (not empty on the db)
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const JsonNull: NullTypes.JsonNull

  /**
   * Helper for filtering JSON entries that are `Prisma.DbNull` or `Prisma.JsonNull`
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const AnyNull: NullTypes.AnyNull

  type SelectAndInclude = {
    select: any
    include: any
  }

  /**
   * Get the type of the value, that the Promise holds.
   */
  export type PromiseType<T extends PromiseLike<any>> = T extends PromiseLike<infer U> ? U : T;

  /**
   * Get the return type of a function which returns a Promise.
   */
  export type PromiseReturnType<T extends (...args: any) => $Utils.JsPromise<any>> = PromiseType<ReturnType<T>>

  /**
   * From T, pick a set of properties whose keys are in the union K
   */
  type Prisma__Pick<T, K extends keyof T> = {
      [P in K]: T[P];
  };


  export type Enumerable<T> = T | Array<T>;

  export type RequiredKeys<T> = {
    [K in keyof T]-?: {} extends Prisma__Pick<T, K> ? never : K
  }[keyof T]

  export type TruthyKeys<T> = keyof {
    [K in keyof T as T[K] extends false | undefined | null ? never : K]: K
  }

  export type TrueKeys<T> = TruthyKeys<Prisma__Pick<T, RequiredKeys<T>>>

  /**
   * Subset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection
   */
  export type Subset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never;
  };

  /**
   * SelectSubset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection.
   * Additionally, it validates, if both select and include are present. If the case, it errors.
   */
  export type SelectSubset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    (T extends SelectAndInclude
      ? 'Please either choose `select` or `include`.'
      : {})

  /**
   * Subset + Intersection
   * @desc From `T` pick properties that exist in `U` and intersect `K`
   */
  export type SubsetIntersection<T, U, K> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    K

  type Without<T, U> = { [P in Exclude<keyof T, keyof U>]?: never };

  /**
   * XOR is needed to have a real mutually exclusive union type
   * https://stackoverflow.com/questions/42123407/does-typescript-support-mutually-exclusive-types
   */
  type XOR<T, U> =
    T extends object ?
    U extends object ?
      (Without<T, U> & U) | (Without<U, T> & T)
    : U : T


  /**
   * Is T a Record?
   */
  type IsObject<T extends any> = T extends Array<any>
  ? False
  : T extends Date
  ? False
  : T extends Uint8Array
  ? False
  : T extends BigInt
  ? False
  : T extends object
  ? True
  : False


  /**
   * If it's T[], return T
   */
  export type UnEnumerate<T extends unknown> = T extends Array<infer U> ? U : T

  /**
   * From ts-toolbelt
   */

  type __Either<O extends object, K extends Key> = Omit<O, K> &
    {
      // Merge all but K
      [P in K]: Prisma__Pick<O, P & keyof O> // With K possibilities
    }[K]

  type EitherStrict<O extends object, K extends Key> = Strict<__Either<O, K>>

  type EitherLoose<O extends object, K extends Key> = ComputeRaw<__Either<O, K>>

  type _Either<
    O extends object,
    K extends Key,
    strict extends Boolean
  > = {
    1: EitherStrict<O, K>
    0: EitherLoose<O, K>
  }[strict]

  type Either<
    O extends object,
    K extends Key,
    strict extends Boolean = 1
  > = O extends unknown ? _Either<O, K, strict> : never

  export type Union = any

  type PatchUndefined<O extends object, O1 extends object> = {
    [K in keyof O]: O[K] extends undefined ? At<O1, K> : O[K]
  } & {}

  /** Helper Types for "Merge" **/
  export type IntersectOf<U extends Union> = (
    U extends unknown ? (k: U) => void : never
  ) extends (k: infer I) => void
    ? I
    : never

  export type Overwrite<O extends object, O1 extends object> = {
      [K in keyof O]: K extends keyof O1 ? O1[K] : O[K];
  } & {};

  type _Merge<U extends object> = IntersectOf<Overwrite<U, {
      [K in keyof U]-?: At<U, K>;
  }>>;

  type Key = string | number | symbol;
  type AtBasic<O extends object, K extends Key> = K extends keyof O ? O[K] : never;
  type AtStrict<O extends object, K extends Key> = O[K & keyof O];
  type AtLoose<O extends object, K extends Key> = O extends unknown ? AtStrict<O, K> : never;
  export type At<O extends object, K extends Key, strict extends Boolean = 1> = {
      1: AtStrict<O, K>;
      0: AtLoose<O, K>;
  }[strict];

  export type ComputeRaw<A extends any> = A extends Function ? A : {
    [K in keyof A]: A[K];
  } & {};

  export type OptionalFlat<O> = {
    [K in keyof O]?: O[K];
  } & {};

  type _Record<K extends keyof any, T> = {
    [P in K]: T;
  };

  // cause typescript not to expand types and preserve names
  type NoExpand<T> = T extends unknown ? T : never;

  // this type assumes the passed object is entirely optional
  type AtLeast<O extends object, K extends string> = NoExpand<
    O extends unknown
    ? | (K extends keyof O ? { [P in K]: O[P] } & O : O)
      | {[P in keyof O as P extends K ? K : never]-?: O[P]} & O
    : never>;

  type _Strict<U, _U = U> = U extends unknown ? U & OptionalFlat<_Record<Exclude<Keys<_U>, keyof U>, never>> : never;

  export type Strict<U extends object> = ComputeRaw<_Strict<U>>;
  /** End Helper Types for "Merge" **/

  export type Merge<U extends object> = ComputeRaw<_Merge<Strict<U>>>;

  /**
  A [[Boolean]]
  */
  export type Boolean = True | False

  // /**
  // 1
  // */
  export type True = 1

  /**
  0
  */
  export type False = 0

  export type Not<B extends Boolean> = {
    0: 1
    1: 0
  }[B]

  export type Extends<A1 extends any, A2 extends any> = [A1] extends [never]
    ? 0 // anything `never` is false
    : A1 extends A2
    ? 1
    : 0

  export type Has<U extends Union, U1 extends Union> = Not<
    Extends<Exclude<U1, U>, U1>
  >

  export type Or<B1 extends Boolean, B2 extends Boolean> = {
    0: {
      0: 0
      1: 1
    }
    1: {
      0: 1
      1: 1
    }
  }[B1][B2]

  export type Keys<U extends Union> = U extends unknown ? keyof U : never

  type Cast<A, B> = A extends B ? A : B;

  export const type: unique symbol;



  /**
   * Used by group by
   */

  export type GetScalarType<T, O> = O extends object ? {
    [P in keyof T]: P extends keyof O
      ? O[P]
      : never
  } : never

  type FieldPaths<
    T,
    U = Omit<T, '_avg' | '_sum' | '_count' | '_min' | '_max'>
  > = IsObject<T> extends True ? U : T

  type GetHavingFields<T> = {
    [K in keyof T]: Or<
      Or<Extends<'OR', K>, Extends<'AND', K>>,
      Extends<'NOT', K>
    > extends True
      ? // infer is only needed to not hit TS limit
        // based on the brilliant idea of Pierre-Antoine Mills
        // https://github.com/microsoft/TypeScript/issues/30188#issuecomment-478938437
        T[K] extends infer TK
        ? GetHavingFields<UnEnumerate<TK> extends object ? Merge<UnEnumerate<TK>> : never>
        : never
      : {} extends FieldPaths<T[K]>
      ? never
      : K
  }[keyof T]

  /**
   * Convert tuple to union
   */
  type _TupleToUnion<T> = T extends (infer E)[] ? E : never
  type TupleToUnion<K extends readonly any[]> = _TupleToUnion<K>
  type MaybeTupleToUnion<T> = T extends any[] ? TupleToUnion<T> : T

  /**
   * Like `Pick`, but additionally can also accept an array of keys
   */
  type PickEnumerable<T, K extends Enumerable<keyof T> | keyof T> = Prisma__Pick<T, MaybeTupleToUnion<K>>

  /**
   * Exclude all keys with underscores
   */
  type ExcludeUnderscoreKeys<T extends string> = T extends `_${string}` ? never : T


  export type FieldRef<Model, FieldType> = runtime.FieldRef<Model, FieldType>

  type FieldRefInputType<Model, FieldType> = Model extends never ? never : FieldRef<Model, FieldType>


  export const ModelName: {
    Dev: 'Dev',
    App: 'App',
    Endpoint: 'Endpoint',
    EndpointCall: 'EndpointCall',
    BugReport: 'BugReport'
  };

  export type ModelName = (typeof ModelName)[keyof typeof ModelName]


  export type Datasources = {
    db?: Datasource
  }


  interface TypeMapCb extends $Utils.Fn<{extArgs: $Extensions.InternalArgs}, $Utils.Record<string, any>> {
    returns: Prisma.TypeMap<this['params']['extArgs']>
  }

  export type TypeMap<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    meta: {
      modelProps: 'dev' | 'app' | 'endpoint' | 'endpointCall' | 'bugReport'
      txIsolationLevel: Prisma.TransactionIsolationLevel
    },
    model: {
      Dev: {
        payload: Prisma.$DevPayload<ExtArgs>
        fields: Prisma.DevFieldRefs
        operations: {
          findUnique: {
            args: Prisma.DevFindUniqueArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$DevPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.DevFindUniqueOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$DevPayload>
          }
          findFirst: {
            args: Prisma.DevFindFirstArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$DevPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.DevFindFirstOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$DevPayload>
          }
          findMany: {
            args: Prisma.DevFindManyArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$DevPayload>[]
          }
          create: {
            args: Prisma.DevCreateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$DevPayload>
          }
          createMany: {
            args: Prisma.DevCreateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          delete: {
            args: Prisma.DevDeleteArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$DevPayload>
          }
          update: {
            args: Prisma.DevUpdateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$DevPayload>
          }
          deleteMany: {
            args: Prisma.DevDeleteManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          updateMany: {
            args: Prisma.DevUpdateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          upsert: {
            args: Prisma.DevUpsertArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$DevPayload>
          }
          aggregate: {
            args: Prisma.DevAggregateArgs<ExtArgs>,
            result: $Utils.Optional<AggregateDev>
          }
          groupBy: {
            args: Prisma.DevGroupByArgs<ExtArgs>,
            result: $Utils.Optional<DevGroupByOutputType>[]
          }
          count: {
            args: Prisma.DevCountArgs<ExtArgs>,
            result: $Utils.Optional<DevCountAggregateOutputType> | number
          }
        }
      }
      App: {
        payload: Prisma.$AppPayload<ExtArgs>
        fields: Prisma.AppFieldRefs
        operations: {
          findUnique: {
            args: Prisma.AppFindUniqueArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$AppPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.AppFindUniqueOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$AppPayload>
          }
          findFirst: {
            args: Prisma.AppFindFirstArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$AppPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.AppFindFirstOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$AppPayload>
          }
          findMany: {
            args: Prisma.AppFindManyArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$AppPayload>[]
          }
          create: {
            args: Prisma.AppCreateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$AppPayload>
          }
          createMany: {
            args: Prisma.AppCreateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          delete: {
            args: Prisma.AppDeleteArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$AppPayload>
          }
          update: {
            args: Prisma.AppUpdateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$AppPayload>
          }
          deleteMany: {
            args: Prisma.AppDeleteManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          updateMany: {
            args: Prisma.AppUpdateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          upsert: {
            args: Prisma.AppUpsertArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$AppPayload>
          }
          aggregate: {
            args: Prisma.AppAggregateArgs<ExtArgs>,
            result: $Utils.Optional<AggregateApp>
          }
          groupBy: {
            args: Prisma.AppGroupByArgs<ExtArgs>,
            result: $Utils.Optional<AppGroupByOutputType>[]
          }
          count: {
            args: Prisma.AppCountArgs<ExtArgs>,
            result: $Utils.Optional<AppCountAggregateOutputType> | number
          }
        }
      }
      Endpoint: {
        payload: Prisma.$EndpointPayload<ExtArgs>
        fields: Prisma.EndpointFieldRefs
        operations: {
          findUnique: {
            args: Prisma.EndpointFindUniqueArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$EndpointPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.EndpointFindUniqueOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$EndpointPayload>
          }
          findFirst: {
            args: Prisma.EndpointFindFirstArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$EndpointPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.EndpointFindFirstOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$EndpointPayload>
          }
          findMany: {
            args: Prisma.EndpointFindManyArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$EndpointPayload>[]
          }
          create: {
            args: Prisma.EndpointCreateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$EndpointPayload>
          }
          createMany: {
            args: Prisma.EndpointCreateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          delete: {
            args: Prisma.EndpointDeleteArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$EndpointPayload>
          }
          update: {
            args: Prisma.EndpointUpdateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$EndpointPayload>
          }
          deleteMany: {
            args: Prisma.EndpointDeleteManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          updateMany: {
            args: Prisma.EndpointUpdateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          upsert: {
            args: Prisma.EndpointUpsertArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$EndpointPayload>
          }
          aggregate: {
            args: Prisma.EndpointAggregateArgs<ExtArgs>,
            result: $Utils.Optional<AggregateEndpoint>
          }
          groupBy: {
            args: Prisma.EndpointGroupByArgs<ExtArgs>,
            result: $Utils.Optional<EndpointGroupByOutputType>[]
          }
          count: {
            args: Prisma.EndpointCountArgs<ExtArgs>,
            result: $Utils.Optional<EndpointCountAggregateOutputType> | number
          }
        }
      }
      EndpointCall: {
        payload: Prisma.$EndpointCallPayload<ExtArgs>
        fields: Prisma.EndpointCallFieldRefs
        operations: {
          findUnique: {
            args: Prisma.EndpointCallFindUniqueArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$EndpointCallPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.EndpointCallFindUniqueOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$EndpointCallPayload>
          }
          findFirst: {
            args: Prisma.EndpointCallFindFirstArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$EndpointCallPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.EndpointCallFindFirstOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$EndpointCallPayload>
          }
          findMany: {
            args: Prisma.EndpointCallFindManyArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$EndpointCallPayload>[]
          }
          create: {
            args: Prisma.EndpointCallCreateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$EndpointCallPayload>
          }
          createMany: {
            args: Prisma.EndpointCallCreateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          delete: {
            args: Prisma.EndpointCallDeleteArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$EndpointCallPayload>
          }
          update: {
            args: Prisma.EndpointCallUpdateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$EndpointCallPayload>
          }
          deleteMany: {
            args: Prisma.EndpointCallDeleteManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          updateMany: {
            args: Prisma.EndpointCallUpdateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          upsert: {
            args: Prisma.EndpointCallUpsertArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$EndpointCallPayload>
          }
          aggregate: {
            args: Prisma.EndpointCallAggregateArgs<ExtArgs>,
            result: $Utils.Optional<AggregateEndpointCall>
          }
          groupBy: {
            args: Prisma.EndpointCallGroupByArgs<ExtArgs>,
            result: $Utils.Optional<EndpointCallGroupByOutputType>[]
          }
          count: {
            args: Prisma.EndpointCallCountArgs<ExtArgs>,
            result: $Utils.Optional<EndpointCallCountAggregateOutputType> | number
          }
        }
      }
      BugReport: {
        payload: Prisma.$BugReportPayload<ExtArgs>
        fields: Prisma.BugReportFieldRefs
        operations: {
          findUnique: {
            args: Prisma.BugReportFindUniqueArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$BugReportPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.BugReportFindUniqueOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$BugReportPayload>
          }
          findFirst: {
            args: Prisma.BugReportFindFirstArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$BugReportPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.BugReportFindFirstOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$BugReportPayload>
          }
          findMany: {
            args: Prisma.BugReportFindManyArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$BugReportPayload>[]
          }
          create: {
            args: Prisma.BugReportCreateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$BugReportPayload>
          }
          createMany: {
            args: Prisma.BugReportCreateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          delete: {
            args: Prisma.BugReportDeleteArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$BugReportPayload>
          }
          update: {
            args: Prisma.BugReportUpdateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$BugReportPayload>
          }
          deleteMany: {
            args: Prisma.BugReportDeleteManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          updateMany: {
            args: Prisma.BugReportUpdateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          upsert: {
            args: Prisma.BugReportUpsertArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$BugReportPayload>
          }
          aggregate: {
            args: Prisma.BugReportAggregateArgs<ExtArgs>,
            result: $Utils.Optional<AggregateBugReport>
          }
          groupBy: {
            args: Prisma.BugReportGroupByArgs<ExtArgs>,
            result: $Utils.Optional<BugReportGroupByOutputType>[]
          }
          count: {
            args: Prisma.BugReportCountArgs<ExtArgs>,
            result: $Utils.Optional<BugReportCountAggregateOutputType> | number
          }
        }
      }
    }
  } & {
    other: {
      payload: any
      operations: {
        $executeRawUnsafe: {
          args: [query: string, ...values: any[]],
          result: any
        }
        $executeRaw: {
          args: [query: TemplateStringsArray | Prisma.Sql, ...values: any[]],
          result: any
        }
        $queryRawUnsafe: {
          args: [query: string, ...values: any[]],
          result: any
        }
        $queryRaw: {
          args: [query: TemplateStringsArray | Prisma.Sql, ...values: any[]],
          result: any
        }
      }
    }
  }
  export const defineExtension: $Extensions.ExtendsHook<'define', Prisma.TypeMapCb, $Extensions.DefaultArgs>
  export type DefaultPrismaClient = PrismaClient
  export type ErrorFormat = 'pretty' | 'colorless' | 'minimal'
  export interface PrismaClientOptions {
    /**
     * Overwrites the datasource url from your schema.prisma file
     */
    datasources?: Datasources
    /**
     * Overwrites the datasource url from your schema.prisma file
     */
    datasourceUrl?: string
    /**
     * @default "colorless"
     */
    errorFormat?: ErrorFormat
    /**
     * @example
     * ```
     * // Defaults to stdout
     * log: ['query', 'info', 'warn', 'error']
     * 
     * // Emit as events
     * log: [
     *   { emit: 'stdout', level: 'query' },
     *   { emit: 'stdout', level: 'info' },
     *   { emit: 'stdout', level: 'warn' }
     *   { emit: 'stdout', level: 'error' }
     * ]
     * ```
     * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/logging#the-log-option).
     */
    log?: (LogLevel | LogDefinition)[]
    /**
     * The default values for transactionOptions
     * maxWait ?= 2000
     * timeout ?= 5000
     */
    transactionOptions?: {
      maxWait?: number
      timeout?: number
      isolationLevel?: Prisma.TransactionIsolationLevel
    }
  }

  /* Types for Logging */
  export type LogLevel = 'info' | 'query' | 'warn' | 'error'
  export type LogDefinition = {
    level: LogLevel
    emit: 'stdout' | 'event'
  }

  export type GetLogType<T extends LogLevel | LogDefinition> = T extends LogDefinition ? T['emit'] extends 'event' ? T['level'] : never : never
  export type GetEvents<T extends any> = T extends Array<LogLevel | LogDefinition> ?
    GetLogType<T[0]> | GetLogType<T[1]> | GetLogType<T[2]> | GetLogType<T[3]>
    : never

  export type QueryEvent = {
    timestamp: Date
    query: string
    params: string
    duration: number
    target: string
  }

  export type LogEvent = {
    timestamp: Date
    message: string
    target: string
  }
  /* End Types for Logging */


  export type PrismaAction =
    | 'findUnique'
    | 'findUniqueOrThrow'
    | 'findMany'
    | 'findFirst'
    | 'findFirstOrThrow'
    | 'create'
    | 'createMany'
    | 'update'
    | 'updateMany'
    | 'upsert'
    | 'delete'
    | 'deleteMany'
    | 'executeRaw'
    | 'queryRaw'
    | 'aggregate'
    | 'count'
    | 'runCommandRaw'
    | 'findRaw'
    | 'groupBy'

  /**
   * These options are being passed into the middleware as "params"
   */
  export type MiddlewareParams = {
    model?: ModelName
    action: PrismaAction
    args: any
    dataPath: string[]
    runInTransaction: boolean
  }

  /**
   * The `T` type makes sure, that the `return proceed` is not forgotten in the middleware implementation
   */
  export type Middleware<T = any> = (
    params: MiddlewareParams,
    next: (params: MiddlewareParams) => $Utils.JsPromise<T>,
  ) => $Utils.JsPromise<T>

  // tested in getLogLevel.test.ts
  export function getLogLevel(log: Array<LogLevel | LogDefinition>): LogLevel | undefined;

  /**
   * `PrismaClient` proxy available in interactive transactions.
   */
  export type TransactionClient = Omit<Prisma.DefaultPrismaClient, runtime.ITXClientDenyList>

  export type Datasource = {
    url?: string
  }

  /**
   * Count Types
   */


  /**
   * Count Type DevCountOutputType
   */

  export type DevCountOutputType = {
    App: number
  }

  export type DevCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    App?: boolean | DevCountOutputTypeCountAppArgs
  }

  // Custom InputTypes

  /**
   * DevCountOutputType without action
   */
  export type DevCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DevCountOutputType
     */
    select?: DevCountOutputTypeSelect<ExtArgs> | null
  }


  /**
   * DevCountOutputType without action
   */
  export type DevCountOutputTypeCountAppArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: AppWhereInput
  }



  /**
   * Count Type AppCountOutputType
   */

  export type AppCountOutputType = {
    Endpoint: number
  }

  export type AppCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    Endpoint?: boolean | AppCountOutputTypeCountEndpointArgs
  }

  // Custom InputTypes

  /**
   * AppCountOutputType without action
   */
  export type AppCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AppCountOutputType
     */
    select?: AppCountOutputTypeSelect<ExtArgs> | null
  }


  /**
   * AppCountOutputType without action
   */
  export type AppCountOutputTypeCountEndpointArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: EndpointWhereInput
  }



  /**
   * Count Type EndpointCountOutputType
   */

  export type EndpointCountOutputType = {
    EndpointCall: number
    BugReport: number
  }

  export type EndpointCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    EndpointCall?: boolean | EndpointCountOutputTypeCountEndpointCallArgs
    BugReport?: boolean | EndpointCountOutputTypeCountBugReportArgs
  }

  // Custom InputTypes

  /**
   * EndpointCountOutputType without action
   */
  export type EndpointCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the EndpointCountOutputType
     */
    select?: EndpointCountOutputTypeSelect<ExtArgs> | null
  }


  /**
   * EndpointCountOutputType without action
   */
  export type EndpointCountOutputTypeCountEndpointCallArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: EndpointCallWhereInput
  }


  /**
   * EndpointCountOutputType without action
   */
  export type EndpointCountOutputTypeCountBugReportArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: BugReportWhereInput
  }



  /**
   * Models
   */

  /**
   * Model Dev
   */

  export type AggregateDev = {
    _count: DevCountAggregateOutputType | null
    _min: DevMinAggregateOutputType | null
    _max: DevMaxAggregateOutputType | null
  }

  export type DevMinAggregateOutputType = {
    id: string | null
    name: string | null
    email: string | null
    hash: string | null
  }

  export type DevMaxAggregateOutputType = {
    id: string | null
    name: string | null
    email: string | null
    hash: string | null
  }

  export type DevCountAggregateOutputType = {
    id: number
    name: number
    email: number
    hash: number
    _all: number
  }


  export type DevMinAggregateInputType = {
    id?: true
    name?: true
    email?: true
    hash?: true
  }

  export type DevMaxAggregateInputType = {
    id?: true
    name?: true
    email?: true
    hash?: true
  }

  export type DevCountAggregateInputType = {
    id?: true
    name?: true
    email?: true
    hash?: true
    _all?: true
  }

  export type DevAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Dev to aggregate.
     */
    where?: DevWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Devs to fetch.
     */
    orderBy?: DevOrderByWithRelationInput | DevOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: DevWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Devs from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Devs.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Devs
    **/
    _count?: true | DevCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: DevMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: DevMaxAggregateInputType
  }

  export type GetDevAggregateType<T extends DevAggregateArgs> = {
        [P in keyof T & keyof AggregateDev]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateDev[P]>
      : GetScalarType<T[P], AggregateDev[P]>
  }




  export type DevGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: DevWhereInput
    orderBy?: DevOrderByWithAggregationInput | DevOrderByWithAggregationInput[]
    by: DevScalarFieldEnum[] | DevScalarFieldEnum
    having?: DevScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: DevCountAggregateInputType | true
    _min?: DevMinAggregateInputType
    _max?: DevMaxAggregateInputType
  }

  export type DevGroupByOutputType = {
    id: string
    name: string | null
    email: string
    hash: string
    _count: DevCountAggregateOutputType | null
    _min: DevMinAggregateOutputType | null
    _max: DevMaxAggregateOutputType | null
  }

  type GetDevGroupByPayload<T extends DevGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<DevGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof DevGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], DevGroupByOutputType[P]>
            : GetScalarType<T[P], DevGroupByOutputType[P]>
        }
      >
    >


  export type DevSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    email?: boolean
    hash?: boolean
    App?: boolean | Dev$AppArgs<ExtArgs>
    _count?: boolean | DevCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["dev"]>

  export type DevSelectScalar = {
    id?: boolean
    name?: boolean
    email?: boolean
    hash?: boolean
  }

  export type DevInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    App?: boolean | Dev$AppArgs<ExtArgs>
    _count?: boolean | DevCountOutputTypeDefaultArgs<ExtArgs>
  }


  export type $DevPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Dev"
    objects: {
      App: Prisma.$AppPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      name: string | null
      email: string
      hash: string
    }, ExtArgs["result"]["dev"]>
    composites: {}
  }


  type DevGetPayload<S extends boolean | null | undefined | DevDefaultArgs> = $Result.GetResult<Prisma.$DevPayload, S>

  type DevCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<DevFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: DevCountAggregateInputType | true
    }

  export interface DevDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Dev'], meta: { name: 'Dev' } }
    /**
     * Find zero or one Dev that matches the filter.
     * @param {DevFindUniqueArgs} args - Arguments to find a Dev
     * @example
     * // Get one Dev
     * const dev = await prisma.dev.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends DevFindUniqueArgs<ExtArgs>>(
      args: SelectSubset<T, DevFindUniqueArgs<ExtArgs>>
    ): Prisma__DevClient<$Result.GetResult<Prisma.$DevPayload<ExtArgs>, T, 'findUnique'> | null, null, ExtArgs>

    /**
     * Find one Dev that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {DevFindUniqueOrThrowArgs} args - Arguments to find a Dev
     * @example
     * // Get one Dev
     * const dev = await prisma.dev.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends DevFindUniqueOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, DevFindUniqueOrThrowArgs<ExtArgs>>
    ): Prisma__DevClient<$Result.GetResult<Prisma.$DevPayload<ExtArgs>, T, 'findUniqueOrThrow'>, never, ExtArgs>

    /**
     * Find the first Dev that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DevFindFirstArgs} args - Arguments to find a Dev
     * @example
     * // Get one Dev
     * const dev = await prisma.dev.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends DevFindFirstArgs<ExtArgs>>(
      args?: SelectSubset<T, DevFindFirstArgs<ExtArgs>>
    ): Prisma__DevClient<$Result.GetResult<Prisma.$DevPayload<ExtArgs>, T, 'findFirst'> | null, null, ExtArgs>

    /**
     * Find the first Dev that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DevFindFirstOrThrowArgs} args - Arguments to find a Dev
     * @example
     * // Get one Dev
     * const dev = await prisma.dev.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends DevFindFirstOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, DevFindFirstOrThrowArgs<ExtArgs>>
    ): Prisma__DevClient<$Result.GetResult<Prisma.$DevPayload<ExtArgs>, T, 'findFirstOrThrow'>, never, ExtArgs>

    /**
     * Find zero or more Devs that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DevFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Devs
     * const devs = await prisma.dev.findMany()
     * 
     * // Get first 10 Devs
     * const devs = await prisma.dev.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const devWithIdOnly = await prisma.dev.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends DevFindManyArgs<ExtArgs>>(
      args?: SelectSubset<T, DevFindManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Result.GetResult<Prisma.$DevPayload<ExtArgs>, T, 'findMany'>>

    /**
     * Create a Dev.
     * @param {DevCreateArgs} args - Arguments to create a Dev.
     * @example
     * // Create one Dev
     * const Dev = await prisma.dev.create({
     *   data: {
     *     // ... data to create a Dev
     *   }
     * })
     * 
    **/
    create<T extends DevCreateArgs<ExtArgs>>(
      args: SelectSubset<T, DevCreateArgs<ExtArgs>>
    ): Prisma__DevClient<$Result.GetResult<Prisma.$DevPayload<ExtArgs>, T, 'create'>, never, ExtArgs>

    /**
     * Create many Devs.
     *     @param {DevCreateManyArgs} args - Arguments to create many Devs.
     *     @example
     *     // Create many Devs
     *     const dev = await prisma.dev.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends DevCreateManyArgs<ExtArgs>>(
      args?: SelectSubset<T, DevCreateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Dev.
     * @param {DevDeleteArgs} args - Arguments to delete one Dev.
     * @example
     * // Delete one Dev
     * const Dev = await prisma.dev.delete({
     *   where: {
     *     // ... filter to delete one Dev
     *   }
     * })
     * 
    **/
    delete<T extends DevDeleteArgs<ExtArgs>>(
      args: SelectSubset<T, DevDeleteArgs<ExtArgs>>
    ): Prisma__DevClient<$Result.GetResult<Prisma.$DevPayload<ExtArgs>, T, 'delete'>, never, ExtArgs>

    /**
     * Update one Dev.
     * @param {DevUpdateArgs} args - Arguments to update one Dev.
     * @example
     * // Update one Dev
     * const dev = await prisma.dev.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends DevUpdateArgs<ExtArgs>>(
      args: SelectSubset<T, DevUpdateArgs<ExtArgs>>
    ): Prisma__DevClient<$Result.GetResult<Prisma.$DevPayload<ExtArgs>, T, 'update'>, never, ExtArgs>

    /**
     * Delete zero or more Devs.
     * @param {DevDeleteManyArgs} args - Arguments to filter Devs to delete.
     * @example
     * // Delete a few Devs
     * const { count } = await prisma.dev.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends DevDeleteManyArgs<ExtArgs>>(
      args?: SelectSubset<T, DevDeleteManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Devs.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DevUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Devs
     * const dev = await prisma.dev.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends DevUpdateManyArgs<ExtArgs>>(
      args: SelectSubset<T, DevUpdateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Dev.
     * @param {DevUpsertArgs} args - Arguments to update or create a Dev.
     * @example
     * // Update or create a Dev
     * const dev = await prisma.dev.upsert({
     *   create: {
     *     // ... data to create a Dev
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Dev we want to update
     *   }
     * })
    **/
    upsert<T extends DevUpsertArgs<ExtArgs>>(
      args: SelectSubset<T, DevUpsertArgs<ExtArgs>>
    ): Prisma__DevClient<$Result.GetResult<Prisma.$DevPayload<ExtArgs>, T, 'upsert'>, never, ExtArgs>

    /**
     * Count the number of Devs.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DevCountArgs} args - Arguments to filter Devs to count.
     * @example
     * // Count the number of Devs
     * const count = await prisma.dev.count({
     *   where: {
     *     // ... the filter for the Devs we want to count
     *   }
     * })
    **/
    count<T extends DevCountArgs>(
      args?: Subset<T, DevCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], DevCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Dev.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DevAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends DevAggregateArgs>(args: Subset<T, DevAggregateArgs>): Prisma.PrismaPromise<GetDevAggregateType<T>>

    /**
     * Group by Dev.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DevGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends DevGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: DevGroupByArgs['orderBy'] }
        : { orderBy?: DevGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, DevGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetDevGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Dev model
   */
  readonly fields: DevFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Dev.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__DevClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: 'PrismaPromise';

    App<T extends Dev$AppArgs<ExtArgs> = {}>(args?: Subset<T, Dev$AppArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$AppPayload<ExtArgs>, T, 'findMany'> | Null>;

    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>;
  }



  /**
   * Fields of the Dev model
   */ 
  interface DevFieldRefs {
    readonly id: FieldRef<"Dev", 'String'>
    readonly name: FieldRef<"Dev", 'String'>
    readonly email: FieldRef<"Dev", 'String'>
    readonly hash: FieldRef<"Dev", 'String'>
  }
    

  // Custom InputTypes

  /**
   * Dev findUnique
   */
  export type DevFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Dev
     */
    select?: DevSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: DevInclude<ExtArgs> | null
    /**
     * Filter, which Dev to fetch.
     */
    where: DevWhereUniqueInput
  }


  /**
   * Dev findUniqueOrThrow
   */
  export type DevFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Dev
     */
    select?: DevSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: DevInclude<ExtArgs> | null
    /**
     * Filter, which Dev to fetch.
     */
    where: DevWhereUniqueInput
  }


  /**
   * Dev findFirst
   */
  export type DevFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Dev
     */
    select?: DevSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: DevInclude<ExtArgs> | null
    /**
     * Filter, which Dev to fetch.
     */
    where?: DevWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Devs to fetch.
     */
    orderBy?: DevOrderByWithRelationInput | DevOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Devs.
     */
    cursor?: DevWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Devs from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Devs.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Devs.
     */
    distinct?: DevScalarFieldEnum | DevScalarFieldEnum[]
  }


  /**
   * Dev findFirstOrThrow
   */
  export type DevFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Dev
     */
    select?: DevSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: DevInclude<ExtArgs> | null
    /**
     * Filter, which Dev to fetch.
     */
    where?: DevWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Devs to fetch.
     */
    orderBy?: DevOrderByWithRelationInput | DevOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Devs.
     */
    cursor?: DevWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Devs from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Devs.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Devs.
     */
    distinct?: DevScalarFieldEnum | DevScalarFieldEnum[]
  }


  /**
   * Dev findMany
   */
  export type DevFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Dev
     */
    select?: DevSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: DevInclude<ExtArgs> | null
    /**
     * Filter, which Devs to fetch.
     */
    where?: DevWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Devs to fetch.
     */
    orderBy?: DevOrderByWithRelationInput | DevOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Devs.
     */
    cursor?: DevWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Devs from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Devs.
     */
    skip?: number
    distinct?: DevScalarFieldEnum | DevScalarFieldEnum[]
  }


  /**
   * Dev create
   */
  export type DevCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Dev
     */
    select?: DevSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: DevInclude<ExtArgs> | null
    /**
     * The data needed to create a Dev.
     */
    data: XOR<DevCreateInput, DevUncheckedCreateInput>
  }


  /**
   * Dev createMany
   */
  export type DevCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Devs.
     */
    data: DevCreateManyInput | DevCreateManyInput[]
    skipDuplicates?: boolean
  }


  /**
   * Dev update
   */
  export type DevUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Dev
     */
    select?: DevSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: DevInclude<ExtArgs> | null
    /**
     * The data needed to update a Dev.
     */
    data: XOR<DevUpdateInput, DevUncheckedUpdateInput>
    /**
     * Choose, which Dev to update.
     */
    where: DevWhereUniqueInput
  }


  /**
   * Dev updateMany
   */
  export type DevUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Devs.
     */
    data: XOR<DevUpdateManyMutationInput, DevUncheckedUpdateManyInput>
    /**
     * Filter which Devs to update
     */
    where?: DevWhereInput
  }


  /**
   * Dev upsert
   */
  export type DevUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Dev
     */
    select?: DevSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: DevInclude<ExtArgs> | null
    /**
     * The filter to search for the Dev to update in case it exists.
     */
    where: DevWhereUniqueInput
    /**
     * In case the Dev found by the `where` argument doesn't exist, create a new Dev with this data.
     */
    create: XOR<DevCreateInput, DevUncheckedCreateInput>
    /**
     * In case the Dev was found with the provided `where` argument, update it with this data.
     */
    update: XOR<DevUpdateInput, DevUncheckedUpdateInput>
  }


  /**
   * Dev delete
   */
  export type DevDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Dev
     */
    select?: DevSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: DevInclude<ExtArgs> | null
    /**
     * Filter which Dev to delete.
     */
    where: DevWhereUniqueInput
  }


  /**
   * Dev deleteMany
   */
  export type DevDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Devs to delete
     */
    where?: DevWhereInput
  }


  /**
   * Dev.App
   */
  export type Dev$AppArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the App
     */
    select?: AppSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: AppInclude<ExtArgs> | null
    where?: AppWhereInput
    orderBy?: AppOrderByWithRelationInput | AppOrderByWithRelationInput[]
    cursor?: AppWhereUniqueInput
    take?: number
    skip?: number
    distinct?: AppScalarFieldEnum | AppScalarFieldEnum[]
  }


  /**
   * Dev without action
   */
  export type DevDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Dev
     */
    select?: DevSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: DevInclude<ExtArgs> | null
  }



  /**
   * Model App
   */

  export type AggregateApp = {
    _count: AppCountAggregateOutputType | null
    _min: AppMinAggregateOutputType | null
    _max: AppMaxAggregateOutputType | null
  }

  export type AppMinAggregateOutputType = {
    id: string | null
    userId: string | null
  }

  export type AppMaxAggregateOutputType = {
    id: string | null
    userId: string | null
  }

  export type AppCountAggregateOutputType = {
    id: number
    userId: number
    _all: number
  }


  export type AppMinAggregateInputType = {
    id?: true
    userId?: true
  }

  export type AppMaxAggregateInputType = {
    id?: true
    userId?: true
  }

  export type AppCountAggregateInputType = {
    id?: true
    userId?: true
    _all?: true
  }

  export type AppAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which App to aggregate.
     */
    where?: AppWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Apps to fetch.
     */
    orderBy?: AppOrderByWithRelationInput | AppOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: AppWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Apps from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Apps.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Apps
    **/
    _count?: true | AppCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: AppMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: AppMaxAggregateInputType
  }

  export type GetAppAggregateType<T extends AppAggregateArgs> = {
        [P in keyof T & keyof AggregateApp]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateApp[P]>
      : GetScalarType<T[P], AggregateApp[P]>
  }




  export type AppGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: AppWhereInput
    orderBy?: AppOrderByWithAggregationInput | AppOrderByWithAggregationInput[]
    by: AppScalarFieldEnum[] | AppScalarFieldEnum
    having?: AppScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: AppCountAggregateInputType | true
    _min?: AppMinAggregateInputType
    _max?: AppMaxAggregateInputType
  }

  export type AppGroupByOutputType = {
    id: string
    userId: string
    _count: AppCountAggregateOutputType | null
    _min: AppMinAggregateOutputType | null
    _max: AppMaxAggregateOutputType | null
  }

  type GetAppGroupByPayload<T extends AppGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<AppGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof AppGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], AppGroupByOutputType[P]>
            : GetScalarType<T[P], AppGroupByOutputType[P]>
        }
      >
    >


  export type AppSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    userId?: boolean
    developer?: boolean | DevDefaultArgs<ExtArgs>
    Endpoint?: boolean | App$EndpointArgs<ExtArgs>
    _count?: boolean | AppCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["app"]>

  export type AppSelectScalar = {
    id?: boolean
    userId?: boolean
  }

  export type AppInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    developer?: boolean | DevDefaultArgs<ExtArgs>
    Endpoint?: boolean | App$EndpointArgs<ExtArgs>
    _count?: boolean | AppCountOutputTypeDefaultArgs<ExtArgs>
  }


  export type $AppPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "App"
    objects: {
      developer: Prisma.$DevPayload<ExtArgs>
      Endpoint: Prisma.$EndpointPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      userId: string
    }, ExtArgs["result"]["app"]>
    composites: {}
  }


  type AppGetPayload<S extends boolean | null | undefined | AppDefaultArgs> = $Result.GetResult<Prisma.$AppPayload, S>

  type AppCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<AppFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: AppCountAggregateInputType | true
    }

  export interface AppDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['App'], meta: { name: 'App' } }
    /**
     * Find zero or one App that matches the filter.
     * @param {AppFindUniqueArgs} args - Arguments to find a App
     * @example
     * // Get one App
     * const app = await prisma.app.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends AppFindUniqueArgs<ExtArgs>>(
      args: SelectSubset<T, AppFindUniqueArgs<ExtArgs>>
    ): Prisma__AppClient<$Result.GetResult<Prisma.$AppPayload<ExtArgs>, T, 'findUnique'> | null, null, ExtArgs>

    /**
     * Find one App that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {AppFindUniqueOrThrowArgs} args - Arguments to find a App
     * @example
     * // Get one App
     * const app = await prisma.app.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends AppFindUniqueOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, AppFindUniqueOrThrowArgs<ExtArgs>>
    ): Prisma__AppClient<$Result.GetResult<Prisma.$AppPayload<ExtArgs>, T, 'findUniqueOrThrow'>, never, ExtArgs>

    /**
     * Find the first App that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AppFindFirstArgs} args - Arguments to find a App
     * @example
     * // Get one App
     * const app = await prisma.app.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends AppFindFirstArgs<ExtArgs>>(
      args?: SelectSubset<T, AppFindFirstArgs<ExtArgs>>
    ): Prisma__AppClient<$Result.GetResult<Prisma.$AppPayload<ExtArgs>, T, 'findFirst'> | null, null, ExtArgs>

    /**
     * Find the first App that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AppFindFirstOrThrowArgs} args - Arguments to find a App
     * @example
     * // Get one App
     * const app = await prisma.app.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends AppFindFirstOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, AppFindFirstOrThrowArgs<ExtArgs>>
    ): Prisma__AppClient<$Result.GetResult<Prisma.$AppPayload<ExtArgs>, T, 'findFirstOrThrow'>, never, ExtArgs>

    /**
     * Find zero or more Apps that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AppFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Apps
     * const apps = await prisma.app.findMany()
     * 
     * // Get first 10 Apps
     * const apps = await prisma.app.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const appWithIdOnly = await prisma.app.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends AppFindManyArgs<ExtArgs>>(
      args?: SelectSubset<T, AppFindManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Result.GetResult<Prisma.$AppPayload<ExtArgs>, T, 'findMany'>>

    /**
     * Create a App.
     * @param {AppCreateArgs} args - Arguments to create a App.
     * @example
     * // Create one App
     * const App = await prisma.app.create({
     *   data: {
     *     // ... data to create a App
     *   }
     * })
     * 
    **/
    create<T extends AppCreateArgs<ExtArgs>>(
      args: SelectSubset<T, AppCreateArgs<ExtArgs>>
    ): Prisma__AppClient<$Result.GetResult<Prisma.$AppPayload<ExtArgs>, T, 'create'>, never, ExtArgs>

    /**
     * Create many Apps.
     *     @param {AppCreateManyArgs} args - Arguments to create many Apps.
     *     @example
     *     // Create many Apps
     *     const app = await prisma.app.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends AppCreateManyArgs<ExtArgs>>(
      args?: SelectSubset<T, AppCreateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a App.
     * @param {AppDeleteArgs} args - Arguments to delete one App.
     * @example
     * // Delete one App
     * const App = await prisma.app.delete({
     *   where: {
     *     // ... filter to delete one App
     *   }
     * })
     * 
    **/
    delete<T extends AppDeleteArgs<ExtArgs>>(
      args: SelectSubset<T, AppDeleteArgs<ExtArgs>>
    ): Prisma__AppClient<$Result.GetResult<Prisma.$AppPayload<ExtArgs>, T, 'delete'>, never, ExtArgs>

    /**
     * Update one App.
     * @param {AppUpdateArgs} args - Arguments to update one App.
     * @example
     * // Update one App
     * const app = await prisma.app.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends AppUpdateArgs<ExtArgs>>(
      args: SelectSubset<T, AppUpdateArgs<ExtArgs>>
    ): Prisma__AppClient<$Result.GetResult<Prisma.$AppPayload<ExtArgs>, T, 'update'>, never, ExtArgs>

    /**
     * Delete zero or more Apps.
     * @param {AppDeleteManyArgs} args - Arguments to filter Apps to delete.
     * @example
     * // Delete a few Apps
     * const { count } = await prisma.app.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends AppDeleteManyArgs<ExtArgs>>(
      args?: SelectSubset<T, AppDeleteManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Apps.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AppUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Apps
     * const app = await prisma.app.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends AppUpdateManyArgs<ExtArgs>>(
      args: SelectSubset<T, AppUpdateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one App.
     * @param {AppUpsertArgs} args - Arguments to update or create a App.
     * @example
     * // Update or create a App
     * const app = await prisma.app.upsert({
     *   create: {
     *     // ... data to create a App
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the App we want to update
     *   }
     * })
    **/
    upsert<T extends AppUpsertArgs<ExtArgs>>(
      args: SelectSubset<T, AppUpsertArgs<ExtArgs>>
    ): Prisma__AppClient<$Result.GetResult<Prisma.$AppPayload<ExtArgs>, T, 'upsert'>, never, ExtArgs>

    /**
     * Count the number of Apps.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AppCountArgs} args - Arguments to filter Apps to count.
     * @example
     * // Count the number of Apps
     * const count = await prisma.app.count({
     *   where: {
     *     // ... the filter for the Apps we want to count
     *   }
     * })
    **/
    count<T extends AppCountArgs>(
      args?: Subset<T, AppCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], AppCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a App.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AppAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends AppAggregateArgs>(args: Subset<T, AppAggregateArgs>): Prisma.PrismaPromise<GetAppAggregateType<T>>

    /**
     * Group by App.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AppGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends AppGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: AppGroupByArgs['orderBy'] }
        : { orderBy?: AppGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, AppGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetAppGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the App model
   */
  readonly fields: AppFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for App.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__AppClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: 'PrismaPromise';

    developer<T extends DevDefaultArgs<ExtArgs> = {}>(args?: Subset<T, DevDefaultArgs<ExtArgs>>): Prisma__DevClient<$Result.GetResult<Prisma.$DevPayload<ExtArgs>, T, 'findUniqueOrThrow'> | Null, Null, ExtArgs>;

    Endpoint<T extends App$EndpointArgs<ExtArgs> = {}>(args?: Subset<T, App$EndpointArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$EndpointPayload<ExtArgs>, T, 'findMany'> | Null>;

    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>;
  }



  /**
   * Fields of the App model
   */ 
  interface AppFieldRefs {
    readonly id: FieldRef<"App", 'String'>
    readonly userId: FieldRef<"App", 'String'>
  }
    

  // Custom InputTypes

  /**
   * App findUnique
   */
  export type AppFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the App
     */
    select?: AppSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: AppInclude<ExtArgs> | null
    /**
     * Filter, which App to fetch.
     */
    where: AppWhereUniqueInput
  }


  /**
   * App findUniqueOrThrow
   */
  export type AppFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the App
     */
    select?: AppSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: AppInclude<ExtArgs> | null
    /**
     * Filter, which App to fetch.
     */
    where: AppWhereUniqueInput
  }


  /**
   * App findFirst
   */
  export type AppFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the App
     */
    select?: AppSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: AppInclude<ExtArgs> | null
    /**
     * Filter, which App to fetch.
     */
    where?: AppWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Apps to fetch.
     */
    orderBy?: AppOrderByWithRelationInput | AppOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Apps.
     */
    cursor?: AppWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Apps from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Apps.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Apps.
     */
    distinct?: AppScalarFieldEnum | AppScalarFieldEnum[]
  }


  /**
   * App findFirstOrThrow
   */
  export type AppFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the App
     */
    select?: AppSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: AppInclude<ExtArgs> | null
    /**
     * Filter, which App to fetch.
     */
    where?: AppWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Apps to fetch.
     */
    orderBy?: AppOrderByWithRelationInput | AppOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Apps.
     */
    cursor?: AppWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Apps from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Apps.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Apps.
     */
    distinct?: AppScalarFieldEnum | AppScalarFieldEnum[]
  }


  /**
   * App findMany
   */
  export type AppFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the App
     */
    select?: AppSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: AppInclude<ExtArgs> | null
    /**
     * Filter, which Apps to fetch.
     */
    where?: AppWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Apps to fetch.
     */
    orderBy?: AppOrderByWithRelationInput | AppOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Apps.
     */
    cursor?: AppWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Apps from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Apps.
     */
    skip?: number
    distinct?: AppScalarFieldEnum | AppScalarFieldEnum[]
  }


  /**
   * App create
   */
  export type AppCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the App
     */
    select?: AppSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: AppInclude<ExtArgs> | null
    /**
     * The data needed to create a App.
     */
    data: XOR<AppCreateInput, AppUncheckedCreateInput>
  }


  /**
   * App createMany
   */
  export type AppCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Apps.
     */
    data: AppCreateManyInput | AppCreateManyInput[]
    skipDuplicates?: boolean
  }


  /**
   * App update
   */
  export type AppUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the App
     */
    select?: AppSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: AppInclude<ExtArgs> | null
    /**
     * The data needed to update a App.
     */
    data: XOR<AppUpdateInput, AppUncheckedUpdateInput>
    /**
     * Choose, which App to update.
     */
    where: AppWhereUniqueInput
  }


  /**
   * App updateMany
   */
  export type AppUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Apps.
     */
    data: XOR<AppUpdateManyMutationInput, AppUncheckedUpdateManyInput>
    /**
     * Filter which Apps to update
     */
    where?: AppWhereInput
  }


  /**
   * App upsert
   */
  export type AppUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the App
     */
    select?: AppSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: AppInclude<ExtArgs> | null
    /**
     * The filter to search for the App to update in case it exists.
     */
    where: AppWhereUniqueInput
    /**
     * In case the App found by the `where` argument doesn't exist, create a new App with this data.
     */
    create: XOR<AppCreateInput, AppUncheckedCreateInput>
    /**
     * In case the App was found with the provided `where` argument, update it with this data.
     */
    update: XOR<AppUpdateInput, AppUncheckedUpdateInput>
  }


  /**
   * App delete
   */
  export type AppDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the App
     */
    select?: AppSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: AppInclude<ExtArgs> | null
    /**
     * Filter which App to delete.
     */
    where: AppWhereUniqueInput
  }


  /**
   * App deleteMany
   */
  export type AppDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Apps to delete
     */
    where?: AppWhereInput
  }


  /**
   * App.Endpoint
   */
  export type App$EndpointArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Endpoint
     */
    select?: EndpointSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: EndpointInclude<ExtArgs> | null
    where?: EndpointWhereInput
    orderBy?: EndpointOrderByWithRelationInput | EndpointOrderByWithRelationInput[]
    cursor?: EndpointWhereUniqueInput
    take?: number
    skip?: number
    distinct?: EndpointScalarFieldEnum | EndpointScalarFieldEnum[]
  }


  /**
   * App without action
   */
  export type AppDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the App
     */
    select?: AppSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: AppInclude<ExtArgs> | null
  }



  /**
   * Model Endpoint
   */

  export type AggregateEndpoint = {
    _count: EndpointCountAggregateOutputType | null
    _avg: EndpointAvgAggregateOutputType | null
    _sum: EndpointSumAggregateOutputType | null
    _min: EndpointMinAggregateOutputType | null
    _max: EndpointMaxAggregateOutputType | null
  }

  export type EndpointAvgAggregateOutputType = {
    interval: number | null
  }

  export type EndpointSumAggregateOutputType = {
    interval: number | null
  }

  export type EndpointMinAggregateOutputType = {
    id: string | null
    appId: string | null
    url: string | null
    headers: string | null
    body: string | null
    interval: number | null
    isBugged: boolean | null
  }

  export type EndpointMaxAggregateOutputType = {
    id: string | null
    appId: string | null
    url: string | null
    headers: string | null
    body: string | null
    interval: number | null
    isBugged: boolean | null
  }

  export type EndpointCountAggregateOutputType = {
    id: number
    appId: number
    url: number
    headers: number
    body: number
    interval: number
    isBugged: number
    _all: number
  }


  export type EndpointAvgAggregateInputType = {
    interval?: true
  }

  export type EndpointSumAggregateInputType = {
    interval?: true
  }

  export type EndpointMinAggregateInputType = {
    id?: true
    appId?: true
    url?: true
    headers?: true
    body?: true
    interval?: true
    isBugged?: true
  }

  export type EndpointMaxAggregateInputType = {
    id?: true
    appId?: true
    url?: true
    headers?: true
    body?: true
    interval?: true
    isBugged?: true
  }

  export type EndpointCountAggregateInputType = {
    id?: true
    appId?: true
    url?: true
    headers?: true
    body?: true
    interval?: true
    isBugged?: true
    _all?: true
  }

  export type EndpointAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Endpoint to aggregate.
     */
    where?: EndpointWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Endpoints to fetch.
     */
    orderBy?: EndpointOrderByWithRelationInput | EndpointOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: EndpointWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Endpoints from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Endpoints.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Endpoints
    **/
    _count?: true | EndpointCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: EndpointAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: EndpointSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: EndpointMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: EndpointMaxAggregateInputType
  }

  export type GetEndpointAggregateType<T extends EndpointAggregateArgs> = {
        [P in keyof T & keyof AggregateEndpoint]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateEndpoint[P]>
      : GetScalarType<T[P], AggregateEndpoint[P]>
  }




  export type EndpointGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: EndpointWhereInput
    orderBy?: EndpointOrderByWithAggregationInput | EndpointOrderByWithAggregationInput[]
    by: EndpointScalarFieldEnum[] | EndpointScalarFieldEnum
    having?: EndpointScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: EndpointCountAggregateInputType | true
    _avg?: EndpointAvgAggregateInputType
    _sum?: EndpointSumAggregateInputType
    _min?: EndpointMinAggregateInputType
    _max?: EndpointMaxAggregateInputType
  }

  export type EndpointGroupByOutputType = {
    id: string
    appId: string
    url: string
    headers: string
    body: string
    interval: number
    isBugged: boolean
    _count: EndpointCountAggregateOutputType | null
    _avg: EndpointAvgAggregateOutputType | null
    _sum: EndpointSumAggregateOutputType | null
    _min: EndpointMinAggregateOutputType | null
    _max: EndpointMaxAggregateOutputType | null
  }

  type GetEndpointGroupByPayload<T extends EndpointGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<EndpointGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof EndpointGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], EndpointGroupByOutputType[P]>
            : GetScalarType<T[P], EndpointGroupByOutputType[P]>
        }
      >
    >


  export type EndpointSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    appId?: boolean
    url?: boolean
    headers?: boolean
    body?: boolean
    interval?: boolean
    isBugged?: boolean
    app?: boolean | AppDefaultArgs<ExtArgs>
    EndpointCall?: boolean | Endpoint$EndpointCallArgs<ExtArgs>
    BugReport?: boolean | Endpoint$BugReportArgs<ExtArgs>
    _count?: boolean | EndpointCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["endpoint"]>

  export type EndpointSelectScalar = {
    id?: boolean
    appId?: boolean
    url?: boolean
    headers?: boolean
    body?: boolean
    interval?: boolean
    isBugged?: boolean
  }

  export type EndpointInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    app?: boolean | AppDefaultArgs<ExtArgs>
    EndpointCall?: boolean | Endpoint$EndpointCallArgs<ExtArgs>
    BugReport?: boolean | Endpoint$BugReportArgs<ExtArgs>
    _count?: boolean | EndpointCountOutputTypeDefaultArgs<ExtArgs>
  }


  export type $EndpointPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Endpoint"
    objects: {
      app: Prisma.$AppPayload<ExtArgs>
      EndpointCall: Prisma.$EndpointCallPayload<ExtArgs>[]
      BugReport: Prisma.$BugReportPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      appId: string
      url: string
      headers: string
      body: string
      interval: number
      isBugged: boolean
    }, ExtArgs["result"]["endpoint"]>
    composites: {}
  }


  type EndpointGetPayload<S extends boolean | null | undefined | EndpointDefaultArgs> = $Result.GetResult<Prisma.$EndpointPayload, S>

  type EndpointCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<EndpointFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: EndpointCountAggregateInputType | true
    }

  export interface EndpointDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Endpoint'], meta: { name: 'Endpoint' } }
    /**
     * Find zero or one Endpoint that matches the filter.
     * @param {EndpointFindUniqueArgs} args - Arguments to find a Endpoint
     * @example
     * // Get one Endpoint
     * const endpoint = await prisma.endpoint.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends EndpointFindUniqueArgs<ExtArgs>>(
      args: SelectSubset<T, EndpointFindUniqueArgs<ExtArgs>>
    ): Prisma__EndpointClient<$Result.GetResult<Prisma.$EndpointPayload<ExtArgs>, T, 'findUnique'> | null, null, ExtArgs>

    /**
     * Find one Endpoint that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {EndpointFindUniqueOrThrowArgs} args - Arguments to find a Endpoint
     * @example
     * // Get one Endpoint
     * const endpoint = await prisma.endpoint.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends EndpointFindUniqueOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, EndpointFindUniqueOrThrowArgs<ExtArgs>>
    ): Prisma__EndpointClient<$Result.GetResult<Prisma.$EndpointPayload<ExtArgs>, T, 'findUniqueOrThrow'>, never, ExtArgs>

    /**
     * Find the first Endpoint that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {EndpointFindFirstArgs} args - Arguments to find a Endpoint
     * @example
     * // Get one Endpoint
     * const endpoint = await prisma.endpoint.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends EndpointFindFirstArgs<ExtArgs>>(
      args?: SelectSubset<T, EndpointFindFirstArgs<ExtArgs>>
    ): Prisma__EndpointClient<$Result.GetResult<Prisma.$EndpointPayload<ExtArgs>, T, 'findFirst'> | null, null, ExtArgs>

    /**
     * Find the first Endpoint that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {EndpointFindFirstOrThrowArgs} args - Arguments to find a Endpoint
     * @example
     * // Get one Endpoint
     * const endpoint = await prisma.endpoint.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends EndpointFindFirstOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, EndpointFindFirstOrThrowArgs<ExtArgs>>
    ): Prisma__EndpointClient<$Result.GetResult<Prisma.$EndpointPayload<ExtArgs>, T, 'findFirstOrThrow'>, never, ExtArgs>

    /**
     * Find zero or more Endpoints that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {EndpointFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Endpoints
     * const endpoints = await prisma.endpoint.findMany()
     * 
     * // Get first 10 Endpoints
     * const endpoints = await prisma.endpoint.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const endpointWithIdOnly = await prisma.endpoint.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends EndpointFindManyArgs<ExtArgs>>(
      args?: SelectSubset<T, EndpointFindManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Result.GetResult<Prisma.$EndpointPayload<ExtArgs>, T, 'findMany'>>

    /**
     * Create a Endpoint.
     * @param {EndpointCreateArgs} args - Arguments to create a Endpoint.
     * @example
     * // Create one Endpoint
     * const Endpoint = await prisma.endpoint.create({
     *   data: {
     *     // ... data to create a Endpoint
     *   }
     * })
     * 
    **/
    create<T extends EndpointCreateArgs<ExtArgs>>(
      args: SelectSubset<T, EndpointCreateArgs<ExtArgs>>
    ): Prisma__EndpointClient<$Result.GetResult<Prisma.$EndpointPayload<ExtArgs>, T, 'create'>, never, ExtArgs>

    /**
     * Create many Endpoints.
     *     @param {EndpointCreateManyArgs} args - Arguments to create many Endpoints.
     *     @example
     *     // Create many Endpoints
     *     const endpoint = await prisma.endpoint.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends EndpointCreateManyArgs<ExtArgs>>(
      args?: SelectSubset<T, EndpointCreateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Endpoint.
     * @param {EndpointDeleteArgs} args - Arguments to delete one Endpoint.
     * @example
     * // Delete one Endpoint
     * const Endpoint = await prisma.endpoint.delete({
     *   where: {
     *     // ... filter to delete one Endpoint
     *   }
     * })
     * 
    **/
    delete<T extends EndpointDeleteArgs<ExtArgs>>(
      args: SelectSubset<T, EndpointDeleteArgs<ExtArgs>>
    ): Prisma__EndpointClient<$Result.GetResult<Prisma.$EndpointPayload<ExtArgs>, T, 'delete'>, never, ExtArgs>

    /**
     * Update one Endpoint.
     * @param {EndpointUpdateArgs} args - Arguments to update one Endpoint.
     * @example
     * // Update one Endpoint
     * const endpoint = await prisma.endpoint.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends EndpointUpdateArgs<ExtArgs>>(
      args: SelectSubset<T, EndpointUpdateArgs<ExtArgs>>
    ): Prisma__EndpointClient<$Result.GetResult<Prisma.$EndpointPayload<ExtArgs>, T, 'update'>, never, ExtArgs>

    /**
     * Delete zero or more Endpoints.
     * @param {EndpointDeleteManyArgs} args - Arguments to filter Endpoints to delete.
     * @example
     * // Delete a few Endpoints
     * const { count } = await prisma.endpoint.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends EndpointDeleteManyArgs<ExtArgs>>(
      args?: SelectSubset<T, EndpointDeleteManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Endpoints.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {EndpointUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Endpoints
     * const endpoint = await prisma.endpoint.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends EndpointUpdateManyArgs<ExtArgs>>(
      args: SelectSubset<T, EndpointUpdateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Endpoint.
     * @param {EndpointUpsertArgs} args - Arguments to update or create a Endpoint.
     * @example
     * // Update or create a Endpoint
     * const endpoint = await prisma.endpoint.upsert({
     *   create: {
     *     // ... data to create a Endpoint
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Endpoint we want to update
     *   }
     * })
    **/
    upsert<T extends EndpointUpsertArgs<ExtArgs>>(
      args: SelectSubset<T, EndpointUpsertArgs<ExtArgs>>
    ): Prisma__EndpointClient<$Result.GetResult<Prisma.$EndpointPayload<ExtArgs>, T, 'upsert'>, never, ExtArgs>

    /**
     * Count the number of Endpoints.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {EndpointCountArgs} args - Arguments to filter Endpoints to count.
     * @example
     * // Count the number of Endpoints
     * const count = await prisma.endpoint.count({
     *   where: {
     *     // ... the filter for the Endpoints we want to count
     *   }
     * })
    **/
    count<T extends EndpointCountArgs>(
      args?: Subset<T, EndpointCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], EndpointCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Endpoint.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {EndpointAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends EndpointAggregateArgs>(args: Subset<T, EndpointAggregateArgs>): Prisma.PrismaPromise<GetEndpointAggregateType<T>>

    /**
     * Group by Endpoint.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {EndpointGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends EndpointGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: EndpointGroupByArgs['orderBy'] }
        : { orderBy?: EndpointGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, EndpointGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetEndpointGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Endpoint model
   */
  readonly fields: EndpointFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Endpoint.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__EndpointClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: 'PrismaPromise';

    app<T extends AppDefaultArgs<ExtArgs> = {}>(args?: Subset<T, AppDefaultArgs<ExtArgs>>): Prisma__AppClient<$Result.GetResult<Prisma.$AppPayload<ExtArgs>, T, 'findUniqueOrThrow'> | Null, Null, ExtArgs>;

    EndpointCall<T extends Endpoint$EndpointCallArgs<ExtArgs> = {}>(args?: Subset<T, Endpoint$EndpointCallArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$EndpointCallPayload<ExtArgs>, T, 'findMany'> | Null>;

    BugReport<T extends Endpoint$BugReportArgs<ExtArgs> = {}>(args?: Subset<T, Endpoint$BugReportArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$BugReportPayload<ExtArgs>, T, 'findMany'> | Null>;

    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>;
  }



  /**
   * Fields of the Endpoint model
   */ 
  interface EndpointFieldRefs {
    readonly id: FieldRef<"Endpoint", 'String'>
    readonly appId: FieldRef<"Endpoint", 'String'>
    readonly url: FieldRef<"Endpoint", 'String'>
    readonly headers: FieldRef<"Endpoint", 'String'>
    readonly body: FieldRef<"Endpoint", 'String'>
    readonly interval: FieldRef<"Endpoint", 'Int'>
    readonly isBugged: FieldRef<"Endpoint", 'Boolean'>
  }
    

  // Custom InputTypes

  /**
   * Endpoint findUnique
   */
  export type EndpointFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Endpoint
     */
    select?: EndpointSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: EndpointInclude<ExtArgs> | null
    /**
     * Filter, which Endpoint to fetch.
     */
    where: EndpointWhereUniqueInput
  }


  /**
   * Endpoint findUniqueOrThrow
   */
  export type EndpointFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Endpoint
     */
    select?: EndpointSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: EndpointInclude<ExtArgs> | null
    /**
     * Filter, which Endpoint to fetch.
     */
    where: EndpointWhereUniqueInput
  }


  /**
   * Endpoint findFirst
   */
  export type EndpointFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Endpoint
     */
    select?: EndpointSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: EndpointInclude<ExtArgs> | null
    /**
     * Filter, which Endpoint to fetch.
     */
    where?: EndpointWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Endpoints to fetch.
     */
    orderBy?: EndpointOrderByWithRelationInput | EndpointOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Endpoints.
     */
    cursor?: EndpointWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Endpoints from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Endpoints.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Endpoints.
     */
    distinct?: EndpointScalarFieldEnum | EndpointScalarFieldEnum[]
  }


  /**
   * Endpoint findFirstOrThrow
   */
  export type EndpointFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Endpoint
     */
    select?: EndpointSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: EndpointInclude<ExtArgs> | null
    /**
     * Filter, which Endpoint to fetch.
     */
    where?: EndpointWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Endpoints to fetch.
     */
    orderBy?: EndpointOrderByWithRelationInput | EndpointOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Endpoints.
     */
    cursor?: EndpointWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Endpoints from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Endpoints.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Endpoints.
     */
    distinct?: EndpointScalarFieldEnum | EndpointScalarFieldEnum[]
  }


  /**
   * Endpoint findMany
   */
  export type EndpointFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Endpoint
     */
    select?: EndpointSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: EndpointInclude<ExtArgs> | null
    /**
     * Filter, which Endpoints to fetch.
     */
    where?: EndpointWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Endpoints to fetch.
     */
    orderBy?: EndpointOrderByWithRelationInput | EndpointOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Endpoints.
     */
    cursor?: EndpointWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Endpoints from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Endpoints.
     */
    skip?: number
    distinct?: EndpointScalarFieldEnum | EndpointScalarFieldEnum[]
  }


  /**
   * Endpoint create
   */
  export type EndpointCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Endpoint
     */
    select?: EndpointSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: EndpointInclude<ExtArgs> | null
    /**
     * The data needed to create a Endpoint.
     */
    data: XOR<EndpointCreateInput, EndpointUncheckedCreateInput>
  }


  /**
   * Endpoint createMany
   */
  export type EndpointCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Endpoints.
     */
    data: EndpointCreateManyInput | EndpointCreateManyInput[]
    skipDuplicates?: boolean
  }


  /**
   * Endpoint update
   */
  export type EndpointUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Endpoint
     */
    select?: EndpointSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: EndpointInclude<ExtArgs> | null
    /**
     * The data needed to update a Endpoint.
     */
    data: XOR<EndpointUpdateInput, EndpointUncheckedUpdateInput>
    /**
     * Choose, which Endpoint to update.
     */
    where: EndpointWhereUniqueInput
  }


  /**
   * Endpoint updateMany
   */
  export type EndpointUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Endpoints.
     */
    data: XOR<EndpointUpdateManyMutationInput, EndpointUncheckedUpdateManyInput>
    /**
     * Filter which Endpoints to update
     */
    where?: EndpointWhereInput
  }


  /**
   * Endpoint upsert
   */
  export type EndpointUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Endpoint
     */
    select?: EndpointSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: EndpointInclude<ExtArgs> | null
    /**
     * The filter to search for the Endpoint to update in case it exists.
     */
    where: EndpointWhereUniqueInput
    /**
     * In case the Endpoint found by the `where` argument doesn't exist, create a new Endpoint with this data.
     */
    create: XOR<EndpointCreateInput, EndpointUncheckedCreateInput>
    /**
     * In case the Endpoint was found with the provided `where` argument, update it with this data.
     */
    update: XOR<EndpointUpdateInput, EndpointUncheckedUpdateInput>
  }


  /**
   * Endpoint delete
   */
  export type EndpointDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Endpoint
     */
    select?: EndpointSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: EndpointInclude<ExtArgs> | null
    /**
     * Filter which Endpoint to delete.
     */
    where: EndpointWhereUniqueInput
  }


  /**
   * Endpoint deleteMany
   */
  export type EndpointDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Endpoints to delete
     */
    where?: EndpointWhereInput
  }


  /**
   * Endpoint.EndpointCall
   */
  export type Endpoint$EndpointCallArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the EndpointCall
     */
    select?: EndpointCallSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: EndpointCallInclude<ExtArgs> | null
    where?: EndpointCallWhereInput
    orderBy?: EndpointCallOrderByWithRelationInput | EndpointCallOrderByWithRelationInput[]
    cursor?: EndpointCallWhereUniqueInput
    take?: number
    skip?: number
    distinct?: EndpointCallScalarFieldEnum | EndpointCallScalarFieldEnum[]
  }


  /**
   * Endpoint.BugReport
   */
  export type Endpoint$BugReportArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the BugReport
     */
    select?: BugReportSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: BugReportInclude<ExtArgs> | null
    where?: BugReportWhereInput
    orderBy?: BugReportOrderByWithRelationInput | BugReportOrderByWithRelationInput[]
    cursor?: BugReportWhereUniqueInput
    take?: number
    skip?: number
    distinct?: BugReportScalarFieldEnum | BugReportScalarFieldEnum[]
  }


  /**
   * Endpoint without action
   */
  export type EndpointDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Endpoint
     */
    select?: EndpointSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: EndpointInclude<ExtArgs> | null
  }



  /**
   * Model EndpointCall
   */

  export type AggregateEndpointCall = {
    _count: EndpointCallCountAggregateOutputType | null
    _avg: EndpointCallAvgAggregateOutputType | null
    _sum: EndpointCallSumAggregateOutputType | null
    _min: EndpointCallMinAggregateOutputType | null
    _max: EndpointCallMaxAggregateOutputType | null
  }

  export type EndpointCallAvgAggregateOutputType = {
    duration: number | null
    status_code: number | null
  }

  export type EndpointCallSumAggregateOutputType = {
    duration: number | null
    status_code: number | null
  }

  export type EndpointCallMinAggregateOutputType = {
    id: string | null
    date: Date | null
    duration: number | null
    endpointId: string | null
    status_code: number | null
    status: string | null
  }

  export type EndpointCallMaxAggregateOutputType = {
    id: string | null
    date: Date | null
    duration: number | null
    endpointId: string | null
    status_code: number | null
    status: string | null
  }

  export type EndpointCallCountAggregateOutputType = {
    id: number
    date: number
    duration: number
    endpointId: number
    status_code: number
    status: number
    _all: number
  }


  export type EndpointCallAvgAggregateInputType = {
    duration?: true
    status_code?: true
  }

  export type EndpointCallSumAggregateInputType = {
    duration?: true
    status_code?: true
  }

  export type EndpointCallMinAggregateInputType = {
    id?: true
    date?: true
    duration?: true
    endpointId?: true
    status_code?: true
    status?: true
  }

  export type EndpointCallMaxAggregateInputType = {
    id?: true
    date?: true
    duration?: true
    endpointId?: true
    status_code?: true
    status?: true
  }

  export type EndpointCallCountAggregateInputType = {
    id?: true
    date?: true
    duration?: true
    endpointId?: true
    status_code?: true
    status?: true
    _all?: true
  }

  export type EndpointCallAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which EndpointCall to aggregate.
     */
    where?: EndpointCallWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of EndpointCalls to fetch.
     */
    orderBy?: EndpointCallOrderByWithRelationInput | EndpointCallOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: EndpointCallWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` EndpointCalls from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` EndpointCalls.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned EndpointCalls
    **/
    _count?: true | EndpointCallCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: EndpointCallAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: EndpointCallSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: EndpointCallMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: EndpointCallMaxAggregateInputType
  }

  export type GetEndpointCallAggregateType<T extends EndpointCallAggregateArgs> = {
        [P in keyof T & keyof AggregateEndpointCall]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateEndpointCall[P]>
      : GetScalarType<T[P], AggregateEndpointCall[P]>
  }




  export type EndpointCallGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: EndpointCallWhereInput
    orderBy?: EndpointCallOrderByWithAggregationInput | EndpointCallOrderByWithAggregationInput[]
    by: EndpointCallScalarFieldEnum[] | EndpointCallScalarFieldEnum
    having?: EndpointCallScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: EndpointCallCountAggregateInputType | true
    _avg?: EndpointCallAvgAggregateInputType
    _sum?: EndpointCallSumAggregateInputType
    _min?: EndpointCallMinAggregateInputType
    _max?: EndpointCallMaxAggregateInputType
  }

  export type EndpointCallGroupByOutputType = {
    id: string
    date: Date
    duration: number
    endpointId: string
    status_code: number
    status: string
    _count: EndpointCallCountAggregateOutputType | null
    _avg: EndpointCallAvgAggregateOutputType | null
    _sum: EndpointCallSumAggregateOutputType | null
    _min: EndpointCallMinAggregateOutputType | null
    _max: EndpointCallMaxAggregateOutputType | null
  }

  type GetEndpointCallGroupByPayload<T extends EndpointCallGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<EndpointCallGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof EndpointCallGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], EndpointCallGroupByOutputType[P]>
            : GetScalarType<T[P], EndpointCallGroupByOutputType[P]>
        }
      >
    >


  export type EndpointCallSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    date?: boolean
    duration?: boolean
    endpointId?: boolean
    status_code?: boolean
    status?: boolean
    endpoint?: boolean | EndpointDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["endpointCall"]>

  export type EndpointCallSelectScalar = {
    id?: boolean
    date?: boolean
    duration?: boolean
    endpointId?: boolean
    status_code?: boolean
    status?: boolean
  }

  export type EndpointCallInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    endpoint?: boolean | EndpointDefaultArgs<ExtArgs>
  }


  export type $EndpointCallPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "EndpointCall"
    objects: {
      endpoint: Prisma.$EndpointPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      date: Date
      duration: number
      endpointId: string
      status_code: number
      status: string
    }, ExtArgs["result"]["endpointCall"]>
    composites: {}
  }


  type EndpointCallGetPayload<S extends boolean | null | undefined | EndpointCallDefaultArgs> = $Result.GetResult<Prisma.$EndpointCallPayload, S>

  type EndpointCallCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<EndpointCallFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: EndpointCallCountAggregateInputType | true
    }

  export interface EndpointCallDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['EndpointCall'], meta: { name: 'EndpointCall' } }
    /**
     * Find zero or one EndpointCall that matches the filter.
     * @param {EndpointCallFindUniqueArgs} args - Arguments to find a EndpointCall
     * @example
     * // Get one EndpointCall
     * const endpointCall = await prisma.endpointCall.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends EndpointCallFindUniqueArgs<ExtArgs>>(
      args: SelectSubset<T, EndpointCallFindUniqueArgs<ExtArgs>>
    ): Prisma__EndpointCallClient<$Result.GetResult<Prisma.$EndpointCallPayload<ExtArgs>, T, 'findUnique'> | null, null, ExtArgs>

    /**
     * Find one EndpointCall that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {EndpointCallFindUniqueOrThrowArgs} args - Arguments to find a EndpointCall
     * @example
     * // Get one EndpointCall
     * const endpointCall = await prisma.endpointCall.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends EndpointCallFindUniqueOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, EndpointCallFindUniqueOrThrowArgs<ExtArgs>>
    ): Prisma__EndpointCallClient<$Result.GetResult<Prisma.$EndpointCallPayload<ExtArgs>, T, 'findUniqueOrThrow'>, never, ExtArgs>

    /**
     * Find the first EndpointCall that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {EndpointCallFindFirstArgs} args - Arguments to find a EndpointCall
     * @example
     * // Get one EndpointCall
     * const endpointCall = await prisma.endpointCall.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends EndpointCallFindFirstArgs<ExtArgs>>(
      args?: SelectSubset<T, EndpointCallFindFirstArgs<ExtArgs>>
    ): Prisma__EndpointCallClient<$Result.GetResult<Prisma.$EndpointCallPayload<ExtArgs>, T, 'findFirst'> | null, null, ExtArgs>

    /**
     * Find the first EndpointCall that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {EndpointCallFindFirstOrThrowArgs} args - Arguments to find a EndpointCall
     * @example
     * // Get one EndpointCall
     * const endpointCall = await prisma.endpointCall.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends EndpointCallFindFirstOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, EndpointCallFindFirstOrThrowArgs<ExtArgs>>
    ): Prisma__EndpointCallClient<$Result.GetResult<Prisma.$EndpointCallPayload<ExtArgs>, T, 'findFirstOrThrow'>, never, ExtArgs>

    /**
     * Find zero or more EndpointCalls that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {EndpointCallFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all EndpointCalls
     * const endpointCalls = await prisma.endpointCall.findMany()
     * 
     * // Get first 10 EndpointCalls
     * const endpointCalls = await prisma.endpointCall.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const endpointCallWithIdOnly = await prisma.endpointCall.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends EndpointCallFindManyArgs<ExtArgs>>(
      args?: SelectSubset<T, EndpointCallFindManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Result.GetResult<Prisma.$EndpointCallPayload<ExtArgs>, T, 'findMany'>>

    /**
     * Create a EndpointCall.
     * @param {EndpointCallCreateArgs} args - Arguments to create a EndpointCall.
     * @example
     * // Create one EndpointCall
     * const EndpointCall = await prisma.endpointCall.create({
     *   data: {
     *     // ... data to create a EndpointCall
     *   }
     * })
     * 
    **/
    create<T extends EndpointCallCreateArgs<ExtArgs>>(
      args: SelectSubset<T, EndpointCallCreateArgs<ExtArgs>>
    ): Prisma__EndpointCallClient<$Result.GetResult<Prisma.$EndpointCallPayload<ExtArgs>, T, 'create'>, never, ExtArgs>

    /**
     * Create many EndpointCalls.
     *     @param {EndpointCallCreateManyArgs} args - Arguments to create many EndpointCalls.
     *     @example
     *     // Create many EndpointCalls
     *     const endpointCall = await prisma.endpointCall.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends EndpointCallCreateManyArgs<ExtArgs>>(
      args?: SelectSubset<T, EndpointCallCreateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a EndpointCall.
     * @param {EndpointCallDeleteArgs} args - Arguments to delete one EndpointCall.
     * @example
     * // Delete one EndpointCall
     * const EndpointCall = await prisma.endpointCall.delete({
     *   where: {
     *     // ... filter to delete one EndpointCall
     *   }
     * })
     * 
    **/
    delete<T extends EndpointCallDeleteArgs<ExtArgs>>(
      args: SelectSubset<T, EndpointCallDeleteArgs<ExtArgs>>
    ): Prisma__EndpointCallClient<$Result.GetResult<Prisma.$EndpointCallPayload<ExtArgs>, T, 'delete'>, never, ExtArgs>

    /**
     * Update one EndpointCall.
     * @param {EndpointCallUpdateArgs} args - Arguments to update one EndpointCall.
     * @example
     * // Update one EndpointCall
     * const endpointCall = await prisma.endpointCall.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends EndpointCallUpdateArgs<ExtArgs>>(
      args: SelectSubset<T, EndpointCallUpdateArgs<ExtArgs>>
    ): Prisma__EndpointCallClient<$Result.GetResult<Prisma.$EndpointCallPayload<ExtArgs>, T, 'update'>, never, ExtArgs>

    /**
     * Delete zero or more EndpointCalls.
     * @param {EndpointCallDeleteManyArgs} args - Arguments to filter EndpointCalls to delete.
     * @example
     * // Delete a few EndpointCalls
     * const { count } = await prisma.endpointCall.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends EndpointCallDeleteManyArgs<ExtArgs>>(
      args?: SelectSubset<T, EndpointCallDeleteManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more EndpointCalls.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {EndpointCallUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many EndpointCalls
     * const endpointCall = await prisma.endpointCall.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends EndpointCallUpdateManyArgs<ExtArgs>>(
      args: SelectSubset<T, EndpointCallUpdateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one EndpointCall.
     * @param {EndpointCallUpsertArgs} args - Arguments to update or create a EndpointCall.
     * @example
     * // Update or create a EndpointCall
     * const endpointCall = await prisma.endpointCall.upsert({
     *   create: {
     *     // ... data to create a EndpointCall
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the EndpointCall we want to update
     *   }
     * })
    **/
    upsert<T extends EndpointCallUpsertArgs<ExtArgs>>(
      args: SelectSubset<T, EndpointCallUpsertArgs<ExtArgs>>
    ): Prisma__EndpointCallClient<$Result.GetResult<Prisma.$EndpointCallPayload<ExtArgs>, T, 'upsert'>, never, ExtArgs>

    /**
     * Count the number of EndpointCalls.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {EndpointCallCountArgs} args - Arguments to filter EndpointCalls to count.
     * @example
     * // Count the number of EndpointCalls
     * const count = await prisma.endpointCall.count({
     *   where: {
     *     // ... the filter for the EndpointCalls we want to count
     *   }
     * })
    **/
    count<T extends EndpointCallCountArgs>(
      args?: Subset<T, EndpointCallCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], EndpointCallCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a EndpointCall.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {EndpointCallAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends EndpointCallAggregateArgs>(args: Subset<T, EndpointCallAggregateArgs>): Prisma.PrismaPromise<GetEndpointCallAggregateType<T>>

    /**
     * Group by EndpointCall.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {EndpointCallGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends EndpointCallGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: EndpointCallGroupByArgs['orderBy'] }
        : { orderBy?: EndpointCallGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, EndpointCallGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetEndpointCallGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the EndpointCall model
   */
  readonly fields: EndpointCallFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for EndpointCall.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__EndpointCallClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: 'PrismaPromise';

    endpoint<T extends EndpointDefaultArgs<ExtArgs> = {}>(args?: Subset<T, EndpointDefaultArgs<ExtArgs>>): Prisma__EndpointClient<$Result.GetResult<Prisma.$EndpointPayload<ExtArgs>, T, 'findUniqueOrThrow'> | Null, Null, ExtArgs>;

    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>;
  }



  /**
   * Fields of the EndpointCall model
   */ 
  interface EndpointCallFieldRefs {
    readonly id: FieldRef<"EndpointCall", 'String'>
    readonly date: FieldRef<"EndpointCall", 'DateTime'>
    readonly duration: FieldRef<"EndpointCall", 'Int'>
    readonly endpointId: FieldRef<"EndpointCall", 'String'>
    readonly status_code: FieldRef<"EndpointCall", 'Int'>
    readonly status: FieldRef<"EndpointCall", 'String'>
  }
    

  // Custom InputTypes

  /**
   * EndpointCall findUnique
   */
  export type EndpointCallFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the EndpointCall
     */
    select?: EndpointCallSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: EndpointCallInclude<ExtArgs> | null
    /**
     * Filter, which EndpointCall to fetch.
     */
    where: EndpointCallWhereUniqueInput
  }


  /**
   * EndpointCall findUniqueOrThrow
   */
  export type EndpointCallFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the EndpointCall
     */
    select?: EndpointCallSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: EndpointCallInclude<ExtArgs> | null
    /**
     * Filter, which EndpointCall to fetch.
     */
    where: EndpointCallWhereUniqueInput
  }


  /**
   * EndpointCall findFirst
   */
  export type EndpointCallFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the EndpointCall
     */
    select?: EndpointCallSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: EndpointCallInclude<ExtArgs> | null
    /**
     * Filter, which EndpointCall to fetch.
     */
    where?: EndpointCallWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of EndpointCalls to fetch.
     */
    orderBy?: EndpointCallOrderByWithRelationInput | EndpointCallOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for EndpointCalls.
     */
    cursor?: EndpointCallWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` EndpointCalls from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` EndpointCalls.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of EndpointCalls.
     */
    distinct?: EndpointCallScalarFieldEnum | EndpointCallScalarFieldEnum[]
  }


  /**
   * EndpointCall findFirstOrThrow
   */
  export type EndpointCallFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the EndpointCall
     */
    select?: EndpointCallSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: EndpointCallInclude<ExtArgs> | null
    /**
     * Filter, which EndpointCall to fetch.
     */
    where?: EndpointCallWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of EndpointCalls to fetch.
     */
    orderBy?: EndpointCallOrderByWithRelationInput | EndpointCallOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for EndpointCalls.
     */
    cursor?: EndpointCallWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` EndpointCalls from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` EndpointCalls.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of EndpointCalls.
     */
    distinct?: EndpointCallScalarFieldEnum | EndpointCallScalarFieldEnum[]
  }


  /**
   * EndpointCall findMany
   */
  export type EndpointCallFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the EndpointCall
     */
    select?: EndpointCallSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: EndpointCallInclude<ExtArgs> | null
    /**
     * Filter, which EndpointCalls to fetch.
     */
    where?: EndpointCallWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of EndpointCalls to fetch.
     */
    orderBy?: EndpointCallOrderByWithRelationInput | EndpointCallOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing EndpointCalls.
     */
    cursor?: EndpointCallWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` EndpointCalls from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` EndpointCalls.
     */
    skip?: number
    distinct?: EndpointCallScalarFieldEnum | EndpointCallScalarFieldEnum[]
  }


  /**
   * EndpointCall create
   */
  export type EndpointCallCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the EndpointCall
     */
    select?: EndpointCallSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: EndpointCallInclude<ExtArgs> | null
    /**
     * The data needed to create a EndpointCall.
     */
    data: XOR<EndpointCallCreateInput, EndpointCallUncheckedCreateInput>
  }


  /**
   * EndpointCall createMany
   */
  export type EndpointCallCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many EndpointCalls.
     */
    data: EndpointCallCreateManyInput | EndpointCallCreateManyInput[]
    skipDuplicates?: boolean
  }


  /**
   * EndpointCall update
   */
  export type EndpointCallUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the EndpointCall
     */
    select?: EndpointCallSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: EndpointCallInclude<ExtArgs> | null
    /**
     * The data needed to update a EndpointCall.
     */
    data: XOR<EndpointCallUpdateInput, EndpointCallUncheckedUpdateInput>
    /**
     * Choose, which EndpointCall to update.
     */
    where: EndpointCallWhereUniqueInput
  }


  /**
   * EndpointCall updateMany
   */
  export type EndpointCallUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update EndpointCalls.
     */
    data: XOR<EndpointCallUpdateManyMutationInput, EndpointCallUncheckedUpdateManyInput>
    /**
     * Filter which EndpointCalls to update
     */
    where?: EndpointCallWhereInput
  }


  /**
   * EndpointCall upsert
   */
  export type EndpointCallUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the EndpointCall
     */
    select?: EndpointCallSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: EndpointCallInclude<ExtArgs> | null
    /**
     * The filter to search for the EndpointCall to update in case it exists.
     */
    where: EndpointCallWhereUniqueInput
    /**
     * In case the EndpointCall found by the `where` argument doesn't exist, create a new EndpointCall with this data.
     */
    create: XOR<EndpointCallCreateInput, EndpointCallUncheckedCreateInput>
    /**
     * In case the EndpointCall was found with the provided `where` argument, update it with this data.
     */
    update: XOR<EndpointCallUpdateInput, EndpointCallUncheckedUpdateInput>
  }


  /**
   * EndpointCall delete
   */
  export type EndpointCallDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the EndpointCall
     */
    select?: EndpointCallSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: EndpointCallInclude<ExtArgs> | null
    /**
     * Filter which EndpointCall to delete.
     */
    where: EndpointCallWhereUniqueInput
  }


  /**
   * EndpointCall deleteMany
   */
  export type EndpointCallDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which EndpointCalls to delete
     */
    where?: EndpointCallWhereInput
  }


  /**
   * EndpointCall without action
   */
  export type EndpointCallDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the EndpointCall
     */
    select?: EndpointCallSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: EndpointCallInclude<ExtArgs> | null
  }



  /**
   * Model BugReport
   */

  export type AggregateBugReport = {
    _count: BugReportCountAggregateOutputType | null
    _min: BugReportMinAggregateOutputType | null
    _max: BugReportMaxAggregateOutputType | null
  }

  export type BugReportMinAggregateOutputType = {
    id: string | null
    report_date: Date | null
    solve_date: Date | null
    details: string | null
    endpointId: string | null
  }

  export type BugReportMaxAggregateOutputType = {
    id: string | null
    report_date: Date | null
    solve_date: Date | null
    details: string | null
    endpointId: string | null
  }

  export type BugReportCountAggregateOutputType = {
    id: number
    report_date: number
    solve_date: number
    details: number
    endpointId: number
    _all: number
  }


  export type BugReportMinAggregateInputType = {
    id?: true
    report_date?: true
    solve_date?: true
    details?: true
    endpointId?: true
  }

  export type BugReportMaxAggregateInputType = {
    id?: true
    report_date?: true
    solve_date?: true
    details?: true
    endpointId?: true
  }

  export type BugReportCountAggregateInputType = {
    id?: true
    report_date?: true
    solve_date?: true
    details?: true
    endpointId?: true
    _all?: true
  }

  export type BugReportAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which BugReport to aggregate.
     */
    where?: BugReportWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of BugReports to fetch.
     */
    orderBy?: BugReportOrderByWithRelationInput | BugReportOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: BugReportWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` BugReports from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` BugReports.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned BugReports
    **/
    _count?: true | BugReportCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: BugReportMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: BugReportMaxAggregateInputType
  }

  export type GetBugReportAggregateType<T extends BugReportAggregateArgs> = {
        [P in keyof T & keyof AggregateBugReport]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateBugReport[P]>
      : GetScalarType<T[P], AggregateBugReport[P]>
  }




  export type BugReportGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: BugReportWhereInput
    orderBy?: BugReportOrderByWithAggregationInput | BugReportOrderByWithAggregationInput[]
    by: BugReportScalarFieldEnum[] | BugReportScalarFieldEnum
    having?: BugReportScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: BugReportCountAggregateInputType | true
    _min?: BugReportMinAggregateInputType
    _max?: BugReportMaxAggregateInputType
  }

  export type BugReportGroupByOutputType = {
    id: string
    report_date: Date
    solve_date: Date
    details: string
    endpointId: string
    _count: BugReportCountAggregateOutputType | null
    _min: BugReportMinAggregateOutputType | null
    _max: BugReportMaxAggregateOutputType | null
  }

  type GetBugReportGroupByPayload<T extends BugReportGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<BugReportGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof BugReportGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], BugReportGroupByOutputType[P]>
            : GetScalarType<T[P], BugReportGroupByOutputType[P]>
        }
      >
    >


  export type BugReportSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    report_date?: boolean
    solve_date?: boolean
    details?: boolean
    endpointId?: boolean
    endpoint?: boolean | EndpointDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["bugReport"]>

  export type BugReportSelectScalar = {
    id?: boolean
    report_date?: boolean
    solve_date?: boolean
    details?: boolean
    endpointId?: boolean
  }

  export type BugReportInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    endpoint?: boolean | EndpointDefaultArgs<ExtArgs>
  }


  export type $BugReportPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "BugReport"
    objects: {
      endpoint: Prisma.$EndpointPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      report_date: Date
      solve_date: Date
      details: string
      endpointId: string
    }, ExtArgs["result"]["bugReport"]>
    composites: {}
  }


  type BugReportGetPayload<S extends boolean | null | undefined | BugReportDefaultArgs> = $Result.GetResult<Prisma.$BugReportPayload, S>

  type BugReportCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<BugReportFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: BugReportCountAggregateInputType | true
    }

  export interface BugReportDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['BugReport'], meta: { name: 'BugReport' } }
    /**
     * Find zero or one BugReport that matches the filter.
     * @param {BugReportFindUniqueArgs} args - Arguments to find a BugReport
     * @example
     * // Get one BugReport
     * const bugReport = await prisma.bugReport.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends BugReportFindUniqueArgs<ExtArgs>>(
      args: SelectSubset<T, BugReportFindUniqueArgs<ExtArgs>>
    ): Prisma__BugReportClient<$Result.GetResult<Prisma.$BugReportPayload<ExtArgs>, T, 'findUnique'> | null, null, ExtArgs>

    /**
     * Find one BugReport that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {BugReportFindUniqueOrThrowArgs} args - Arguments to find a BugReport
     * @example
     * // Get one BugReport
     * const bugReport = await prisma.bugReport.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends BugReportFindUniqueOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, BugReportFindUniqueOrThrowArgs<ExtArgs>>
    ): Prisma__BugReportClient<$Result.GetResult<Prisma.$BugReportPayload<ExtArgs>, T, 'findUniqueOrThrow'>, never, ExtArgs>

    /**
     * Find the first BugReport that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {BugReportFindFirstArgs} args - Arguments to find a BugReport
     * @example
     * // Get one BugReport
     * const bugReport = await prisma.bugReport.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends BugReportFindFirstArgs<ExtArgs>>(
      args?: SelectSubset<T, BugReportFindFirstArgs<ExtArgs>>
    ): Prisma__BugReportClient<$Result.GetResult<Prisma.$BugReportPayload<ExtArgs>, T, 'findFirst'> | null, null, ExtArgs>

    /**
     * Find the first BugReport that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {BugReportFindFirstOrThrowArgs} args - Arguments to find a BugReport
     * @example
     * // Get one BugReport
     * const bugReport = await prisma.bugReport.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends BugReportFindFirstOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, BugReportFindFirstOrThrowArgs<ExtArgs>>
    ): Prisma__BugReportClient<$Result.GetResult<Prisma.$BugReportPayload<ExtArgs>, T, 'findFirstOrThrow'>, never, ExtArgs>

    /**
     * Find zero or more BugReports that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {BugReportFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all BugReports
     * const bugReports = await prisma.bugReport.findMany()
     * 
     * // Get first 10 BugReports
     * const bugReports = await prisma.bugReport.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const bugReportWithIdOnly = await prisma.bugReport.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends BugReportFindManyArgs<ExtArgs>>(
      args?: SelectSubset<T, BugReportFindManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Result.GetResult<Prisma.$BugReportPayload<ExtArgs>, T, 'findMany'>>

    /**
     * Create a BugReport.
     * @param {BugReportCreateArgs} args - Arguments to create a BugReport.
     * @example
     * // Create one BugReport
     * const BugReport = await prisma.bugReport.create({
     *   data: {
     *     // ... data to create a BugReport
     *   }
     * })
     * 
    **/
    create<T extends BugReportCreateArgs<ExtArgs>>(
      args: SelectSubset<T, BugReportCreateArgs<ExtArgs>>
    ): Prisma__BugReportClient<$Result.GetResult<Prisma.$BugReportPayload<ExtArgs>, T, 'create'>, never, ExtArgs>

    /**
     * Create many BugReports.
     *     @param {BugReportCreateManyArgs} args - Arguments to create many BugReports.
     *     @example
     *     // Create many BugReports
     *     const bugReport = await prisma.bugReport.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends BugReportCreateManyArgs<ExtArgs>>(
      args?: SelectSubset<T, BugReportCreateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a BugReport.
     * @param {BugReportDeleteArgs} args - Arguments to delete one BugReport.
     * @example
     * // Delete one BugReport
     * const BugReport = await prisma.bugReport.delete({
     *   where: {
     *     // ... filter to delete one BugReport
     *   }
     * })
     * 
    **/
    delete<T extends BugReportDeleteArgs<ExtArgs>>(
      args: SelectSubset<T, BugReportDeleteArgs<ExtArgs>>
    ): Prisma__BugReportClient<$Result.GetResult<Prisma.$BugReportPayload<ExtArgs>, T, 'delete'>, never, ExtArgs>

    /**
     * Update one BugReport.
     * @param {BugReportUpdateArgs} args - Arguments to update one BugReport.
     * @example
     * // Update one BugReport
     * const bugReport = await prisma.bugReport.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends BugReportUpdateArgs<ExtArgs>>(
      args: SelectSubset<T, BugReportUpdateArgs<ExtArgs>>
    ): Prisma__BugReportClient<$Result.GetResult<Prisma.$BugReportPayload<ExtArgs>, T, 'update'>, never, ExtArgs>

    /**
     * Delete zero or more BugReports.
     * @param {BugReportDeleteManyArgs} args - Arguments to filter BugReports to delete.
     * @example
     * // Delete a few BugReports
     * const { count } = await prisma.bugReport.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends BugReportDeleteManyArgs<ExtArgs>>(
      args?: SelectSubset<T, BugReportDeleteManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more BugReports.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {BugReportUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many BugReports
     * const bugReport = await prisma.bugReport.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends BugReportUpdateManyArgs<ExtArgs>>(
      args: SelectSubset<T, BugReportUpdateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one BugReport.
     * @param {BugReportUpsertArgs} args - Arguments to update or create a BugReport.
     * @example
     * // Update or create a BugReport
     * const bugReport = await prisma.bugReport.upsert({
     *   create: {
     *     // ... data to create a BugReport
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the BugReport we want to update
     *   }
     * })
    **/
    upsert<T extends BugReportUpsertArgs<ExtArgs>>(
      args: SelectSubset<T, BugReportUpsertArgs<ExtArgs>>
    ): Prisma__BugReportClient<$Result.GetResult<Prisma.$BugReportPayload<ExtArgs>, T, 'upsert'>, never, ExtArgs>

    /**
     * Count the number of BugReports.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {BugReportCountArgs} args - Arguments to filter BugReports to count.
     * @example
     * // Count the number of BugReports
     * const count = await prisma.bugReport.count({
     *   where: {
     *     // ... the filter for the BugReports we want to count
     *   }
     * })
    **/
    count<T extends BugReportCountArgs>(
      args?: Subset<T, BugReportCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], BugReportCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a BugReport.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {BugReportAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends BugReportAggregateArgs>(args: Subset<T, BugReportAggregateArgs>): Prisma.PrismaPromise<GetBugReportAggregateType<T>>

    /**
     * Group by BugReport.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {BugReportGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends BugReportGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: BugReportGroupByArgs['orderBy'] }
        : { orderBy?: BugReportGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, BugReportGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetBugReportGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the BugReport model
   */
  readonly fields: BugReportFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for BugReport.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__BugReportClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: 'PrismaPromise';

    endpoint<T extends EndpointDefaultArgs<ExtArgs> = {}>(args?: Subset<T, EndpointDefaultArgs<ExtArgs>>): Prisma__EndpointClient<$Result.GetResult<Prisma.$EndpointPayload<ExtArgs>, T, 'findUniqueOrThrow'> | Null, Null, ExtArgs>;

    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>;
  }



  /**
   * Fields of the BugReport model
   */ 
  interface BugReportFieldRefs {
    readonly id: FieldRef<"BugReport", 'String'>
    readonly report_date: FieldRef<"BugReport", 'DateTime'>
    readonly solve_date: FieldRef<"BugReport", 'DateTime'>
    readonly details: FieldRef<"BugReport", 'String'>
    readonly endpointId: FieldRef<"BugReport", 'String'>
  }
    

  // Custom InputTypes

  /**
   * BugReport findUnique
   */
  export type BugReportFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the BugReport
     */
    select?: BugReportSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: BugReportInclude<ExtArgs> | null
    /**
     * Filter, which BugReport to fetch.
     */
    where: BugReportWhereUniqueInput
  }


  /**
   * BugReport findUniqueOrThrow
   */
  export type BugReportFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the BugReport
     */
    select?: BugReportSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: BugReportInclude<ExtArgs> | null
    /**
     * Filter, which BugReport to fetch.
     */
    where: BugReportWhereUniqueInput
  }


  /**
   * BugReport findFirst
   */
  export type BugReportFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the BugReport
     */
    select?: BugReportSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: BugReportInclude<ExtArgs> | null
    /**
     * Filter, which BugReport to fetch.
     */
    where?: BugReportWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of BugReports to fetch.
     */
    orderBy?: BugReportOrderByWithRelationInput | BugReportOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for BugReports.
     */
    cursor?: BugReportWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` BugReports from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` BugReports.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of BugReports.
     */
    distinct?: BugReportScalarFieldEnum | BugReportScalarFieldEnum[]
  }


  /**
   * BugReport findFirstOrThrow
   */
  export type BugReportFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the BugReport
     */
    select?: BugReportSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: BugReportInclude<ExtArgs> | null
    /**
     * Filter, which BugReport to fetch.
     */
    where?: BugReportWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of BugReports to fetch.
     */
    orderBy?: BugReportOrderByWithRelationInput | BugReportOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for BugReports.
     */
    cursor?: BugReportWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` BugReports from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` BugReports.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of BugReports.
     */
    distinct?: BugReportScalarFieldEnum | BugReportScalarFieldEnum[]
  }


  /**
   * BugReport findMany
   */
  export type BugReportFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the BugReport
     */
    select?: BugReportSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: BugReportInclude<ExtArgs> | null
    /**
     * Filter, which BugReports to fetch.
     */
    where?: BugReportWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of BugReports to fetch.
     */
    orderBy?: BugReportOrderByWithRelationInput | BugReportOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing BugReports.
     */
    cursor?: BugReportWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` BugReports from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` BugReports.
     */
    skip?: number
    distinct?: BugReportScalarFieldEnum | BugReportScalarFieldEnum[]
  }


  /**
   * BugReport create
   */
  export type BugReportCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the BugReport
     */
    select?: BugReportSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: BugReportInclude<ExtArgs> | null
    /**
     * The data needed to create a BugReport.
     */
    data: XOR<BugReportCreateInput, BugReportUncheckedCreateInput>
  }


  /**
   * BugReport createMany
   */
  export type BugReportCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many BugReports.
     */
    data: BugReportCreateManyInput | BugReportCreateManyInput[]
    skipDuplicates?: boolean
  }


  /**
   * BugReport update
   */
  export type BugReportUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the BugReport
     */
    select?: BugReportSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: BugReportInclude<ExtArgs> | null
    /**
     * The data needed to update a BugReport.
     */
    data: XOR<BugReportUpdateInput, BugReportUncheckedUpdateInput>
    /**
     * Choose, which BugReport to update.
     */
    where: BugReportWhereUniqueInput
  }


  /**
   * BugReport updateMany
   */
  export type BugReportUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update BugReports.
     */
    data: XOR<BugReportUpdateManyMutationInput, BugReportUncheckedUpdateManyInput>
    /**
     * Filter which BugReports to update
     */
    where?: BugReportWhereInput
  }


  /**
   * BugReport upsert
   */
  export type BugReportUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the BugReport
     */
    select?: BugReportSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: BugReportInclude<ExtArgs> | null
    /**
     * The filter to search for the BugReport to update in case it exists.
     */
    where: BugReportWhereUniqueInput
    /**
     * In case the BugReport found by the `where` argument doesn't exist, create a new BugReport with this data.
     */
    create: XOR<BugReportCreateInput, BugReportUncheckedCreateInput>
    /**
     * In case the BugReport was found with the provided `where` argument, update it with this data.
     */
    update: XOR<BugReportUpdateInput, BugReportUncheckedUpdateInput>
  }


  /**
   * BugReport delete
   */
  export type BugReportDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the BugReport
     */
    select?: BugReportSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: BugReportInclude<ExtArgs> | null
    /**
     * Filter which BugReport to delete.
     */
    where: BugReportWhereUniqueInput
  }


  /**
   * BugReport deleteMany
   */
  export type BugReportDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which BugReports to delete
     */
    where?: BugReportWhereInput
  }


  /**
   * BugReport without action
   */
  export type BugReportDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the BugReport
     */
    select?: BugReportSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: BugReportInclude<ExtArgs> | null
  }



  /**
   * Enums
   */

  export const TransactionIsolationLevel: {
    ReadUncommitted: 'ReadUncommitted',
    ReadCommitted: 'ReadCommitted',
    RepeatableRead: 'RepeatableRead',
    Serializable: 'Serializable'
  };

  export type TransactionIsolationLevel = (typeof TransactionIsolationLevel)[keyof typeof TransactionIsolationLevel]


  export const DevScalarFieldEnum: {
    id: 'id',
    name: 'name',
    email: 'email',
    hash: 'hash'
  };

  export type DevScalarFieldEnum = (typeof DevScalarFieldEnum)[keyof typeof DevScalarFieldEnum]


  export const AppScalarFieldEnum: {
    id: 'id',
    userId: 'userId'
  };

  export type AppScalarFieldEnum = (typeof AppScalarFieldEnum)[keyof typeof AppScalarFieldEnum]


  export const EndpointScalarFieldEnum: {
    id: 'id',
    appId: 'appId',
    url: 'url',
    headers: 'headers',
    body: 'body',
    interval: 'interval',
    isBugged: 'isBugged'
  };

  export type EndpointScalarFieldEnum = (typeof EndpointScalarFieldEnum)[keyof typeof EndpointScalarFieldEnum]


  export const EndpointCallScalarFieldEnum: {
    id: 'id',
    date: 'date',
    duration: 'duration',
    endpointId: 'endpointId',
    status_code: 'status_code',
    status: 'status'
  };

  export type EndpointCallScalarFieldEnum = (typeof EndpointCallScalarFieldEnum)[keyof typeof EndpointCallScalarFieldEnum]


  export const BugReportScalarFieldEnum: {
    id: 'id',
    report_date: 'report_date',
    solve_date: 'solve_date',
    details: 'details',
    endpointId: 'endpointId'
  };

  export type BugReportScalarFieldEnum = (typeof BugReportScalarFieldEnum)[keyof typeof BugReportScalarFieldEnum]


  export const SortOrder: {
    asc: 'asc',
    desc: 'desc'
  };

  export type SortOrder = (typeof SortOrder)[keyof typeof SortOrder]


  export const QueryMode: {
    default: 'default',
    insensitive: 'insensitive'
  };

  export type QueryMode = (typeof QueryMode)[keyof typeof QueryMode]


  export const NullsOrder: {
    first: 'first',
    last: 'last'
  };

  export type NullsOrder = (typeof NullsOrder)[keyof typeof NullsOrder]


  /**
   * Field references 
   */


  /**
   * Reference to a field of type 'String'
   */
  export type StringFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'String'>
    


  /**
   * Reference to a field of type 'String[]'
   */
  export type ListStringFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'String[]'>
    


  /**
   * Reference to a field of type 'Int'
   */
  export type IntFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Int'>
    


  /**
   * Reference to a field of type 'Int[]'
   */
  export type ListIntFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Int[]'>
    


  /**
   * Reference to a field of type 'Boolean'
   */
  export type BooleanFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Boolean'>
    


  /**
   * Reference to a field of type 'DateTime'
   */
  export type DateTimeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'DateTime'>
    


  /**
   * Reference to a field of type 'DateTime[]'
   */
  export type ListDateTimeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'DateTime[]'>
    


  /**
   * Reference to a field of type 'Float'
   */
  export type FloatFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Float'>
    


  /**
   * Reference to a field of type 'Float[]'
   */
  export type ListFloatFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Float[]'>
    
  /**
   * Deep Input Types
   */


  export type DevWhereInput = {
    AND?: DevWhereInput | DevWhereInput[]
    OR?: DevWhereInput[]
    NOT?: DevWhereInput | DevWhereInput[]
    id?: StringFilter<"Dev"> | string
    name?: StringNullableFilter<"Dev"> | string | null
    email?: StringFilter<"Dev"> | string
    hash?: StringFilter<"Dev"> | string
    App?: AppListRelationFilter
  }

  export type DevOrderByWithRelationInput = {
    id?: SortOrder
    name?: SortOrderInput | SortOrder
    email?: SortOrder
    hash?: SortOrder
    App?: AppOrderByRelationAggregateInput
  }

  export type DevWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    email?: string
    AND?: DevWhereInput | DevWhereInput[]
    OR?: DevWhereInput[]
    NOT?: DevWhereInput | DevWhereInput[]
    name?: StringNullableFilter<"Dev"> | string | null
    hash?: StringFilter<"Dev"> | string
    App?: AppListRelationFilter
  }, "id" | "email">

  export type DevOrderByWithAggregationInput = {
    id?: SortOrder
    name?: SortOrderInput | SortOrder
    email?: SortOrder
    hash?: SortOrder
    _count?: DevCountOrderByAggregateInput
    _max?: DevMaxOrderByAggregateInput
    _min?: DevMinOrderByAggregateInput
  }

  export type DevScalarWhereWithAggregatesInput = {
    AND?: DevScalarWhereWithAggregatesInput | DevScalarWhereWithAggregatesInput[]
    OR?: DevScalarWhereWithAggregatesInput[]
    NOT?: DevScalarWhereWithAggregatesInput | DevScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"Dev"> | string
    name?: StringNullableWithAggregatesFilter<"Dev"> | string | null
    email?: StringWithAggregatesFilter<"Dev"> | string
    hash?: StringWithAggregatesFilter<"Dev"> | string
  }

  export type AppWhereInput = {
    AND?: AppWhereInput | AppWhereInput[]
    OR?: AppWhereInput[]
    NOT?: AppWhereInput | AppWhereInput[]
    id?: StringFilter<"App"> | string
    userId?: StringFilter<"App"> | string
    developer?: XOR<DevRelationFilter, DevWhereInput>
    Endpoint?: EndpointListRelationFilter
  }

  export type AppOrderByWithRelationInput = {
    id?: SortOrder
    userId?: SortOrder
    developer?: DevOrderByWithRelationInput
    Endpoint?: EndpointOrderByRelationAggregateInput
  }

  export type AppWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: AppWhereInput | AppWhereInput[]
    OR?: AppWhereInput[]
    NOT?: AppWhereInput | AppWhereInput[]
    userId?: StringFilter<"App"> | string
    developer?: XOR<DevRelationFilter, DevWhereInput>
    Endpoint?: EndpointListRelationFilter
  }, "id">

  export type AppOrderByWithAggregationInput = {
    id?: SortOrder
    userId?: SortOrder
    _count?: AppCountOrderByAggregateInput
    _max?: AppMaxOrderByAggregateInput
    _min?: AppMinOrderByAggregateInput
  }

  export type AppScalarWhereWithAggregatesInput = {
    AND?: AppScalarWhereWithAggregatesInput | AppScalarWhereWithAggregatesInput[]
    OR?: AppScalarWhereWithAggregatesInput[]
    NOT?: AppScalarWhereWithAggregatesInput | AppScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"App"> | string
    userId?: StringWithAggregatesFilter<"App"> | string
  }

  export type EndpointWhereInput = {
    AND?: EndpointWhereInput | EndpointWhereInput[]
    OR?: EndpointWhereInput[]
    NOT?: EndpointWhereInput | EndpointWhereInput[]
    id?: StringFilter<"Endpoint"> | string
    appId?: StringFilter<"Endpoint"> | string
    url?: StringFilter<"Endpoint"> | string
    headers?: StringFilter<"Endpoint"> | string
    body?: StringFilter<"Endpoint"> | string
    interval?: IntFilter<"Endpoint"> | number
    isBugged?: BoolFilter<"Endpoint"> | boolean
    app?: XOR<AppRelationFilter, AppWhereInput>
    EndpointCall?: EndpointCallListRelationFilter
    BugReport?: BugReportListRelationFilter
  }

  export type EndpointOrderByWithRelationInput = {
    id?: SortOrder
    appId?: SortOrder
    url?: SortOrder
    headers?: SortOrder
    body?: SortOrder
    interval?: SortOrder
    isBugged?: SortOrder
    app?: AppOrderByWithRelationInput
    EndpointCall?: EndpointCallOrderByRelationAggregateInput
    BugReport?: BugReportOrderByRelationAggregateInput
  }

  export type EndpointWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: EndpointWhereInput | EndpointWhereInput[]
    OR?: EndpointWhereInput[]
    NOT?: EndpointWhereInput | EndpointWhereInput[]
    appId?: StringFilter<"Endpoint"> | string
    url?: StringFilter<"Endpoint"> | string
    headers?: StringFilter<"Endpoint"> | string
    body?: StringFilter<"Endpoint"> | string
    interval?: IntFilter<"Endpoint"> | number
    isBugged?: BoolFilter<"Endpoint"> | boolean
    app?: XOR<AppRelationFilter, AppWhereInput>
    EndpointCall?: EndpointCallListRelationFilter
    BugReport?: BugReportListRelationFilter
  }, "id">

  export type EndpointOrderByWithAggregationInput = {
    id?: SortOrder
    appId?: SortOrder
    url?: SortOrder
    headers?: SortOrder
    body?: SortOrder
    interval?: SortOrder
    isBugged?: SortOrder
    _count?: EndpointCountOrderByAggregateInput
    _avg?: EndpointAvgOrderByAggregateInput
    _max?: EndpointMaxOrderByAggregateInput
    _min?: EndpointMinOrderByAggregateInput
    _sum?: EndpointSumOrderByAggregateInput
  }

  export type EndpointScalarWhereWithAggregatesInput = {
    AND?: EndpointScalarWhereWithAggregatesInput | EndpointScalarWhereWithAggregatesInput[]
    OR?: EndpointScalarWhereWithAggregatesInput[]
    NOT?: EndpointScalarWhereWithAggregatesInput | EndpointScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"Endpoint"> | string
    appId?: StringWithAggregatesFilter<"Endpoint"> | string
    url?: StringWithAggregatesFilter<"Endpoint"> | string
    headers?: StringWithAggregatesFilter<"Endpoint"> | string
    body?: StringWithAggregatesFilter<"Endpoint"> | string
    interval?: IntWithAggregatesFilter<"Endpoint"> | number
    isBugged?: BoolWithAggregatesFilter<"Endpoint"> | boolean
  }

  export type EndpointCallWhereInput = {
    AND?: EndpointCallWhereInput | EndpointCallWhereInput[]
    OR?: EndpointCallWhereInput[]
    NOT?: EndpointCallWhereInput | EndpointCallWhereInput[]
    id?: StringFilter<"EndpointCall"> | string
    date?: DateTimeFilter<"EndpointCall"> | Date | string
    duration?: IntFilter<"EndpointCall"> | number
    endpointId?: StringFilter<"EndpointCall"> | string
    status_code?: IntFilter<"EndpointCall"> | number
    status?: StringFilter<"EndpointCall"> | string
    endpoint?: XOR<EndpointRelationFilter, EndpointWhereInput>
  }

  export type EndpointCallOrderByWithRelationInput = {
    id?: SortOrder
    date?: SortOrder
    duration?: SortOrder
    endpointId?: SortOrder
    status_code?: SortOrder
    status?: SortOrder
    endpoint?: EndpointOrderByWithRelationInput
  }

  export type EndpointCallWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: EndpointCallWhereInput | EndpointCallWhereInput[]
    OR?: EndpointCallWhereInput[]
    NOT?: EndpointCallWhereInput | EndpointCallWhereInput[]
    date?: DateTimeFilter<"EndpointCall"> | Date | string
    duration?: IntFilter<"EndpointCall"> | number
    endpointId?: StringFilter<"EndpointCall"> | string
    status_code?: IntFilter<"EndpointCall"> | number
    status?: StringFilter<"EndpointCall"> | string
    endpoint?: XOR<EndpointRelationFilter, EndpointWhereInput>
  }, "id">

  export type EndpointCallOrderByWithAggregationInput = {
    id?: SortOrder
    date?: SortOrder
    duration?: SortOrder
    endpointId?: SortOrder
    status_code?: SortOrder
    status?: SortOrder
    _count?: EndpointCallCountOrderByAggregateInput
    _avg?: EndpointCallAvgOrderByAggregateInput
    _max?: EndpointCallMaxOrderByAggregateInput
    _min?: EndpointCallMinOrderByAggregateInput
    _sum?: EndpointCallSumOrderByAggregateInput
  }

  export type EndpointCallScalarWhereWithAggregatesInput = {
    AND?: EndpointCallScalarWhereWithAggregatesInput | EndpointCallScalarWhereWithAggregatesInput[]
    OR?: EndpointCallScalarWhereWithAggregatesInput[]
    NOT?: EndpointCallScalarWhereWithAggregatesInput | EndpointCallScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"EndpointCall"> | string
    date?: DateTimeWithAggregatesFilter<"EndpointCall"> | Date | string
    duration?: IntWithAggregatesFilter<"EndpointCall"> | number
    endpointId?: StringWithAggregatesFilter<"EndpointCall"> | string
    status_code?: IntWithAggregatesFilter<"EndpointCall"> | number
    status?: StringWithAggregatesFilter<"EndpointCall"> | string
  }

  export type BugReportWhereInput = {
    AND?: BugReportWhereInput | BugReportWhereInput[]
    OR?: BugReportWhereInput[]
    NOT?: BugReportWhereInput | BugReportWhereInput[]
    id?: StringFilter<"BugReport"> | string
    report_date?: DateTimeFilter<"BugReport"> | Date | string
    solve_date?: DateTimeFilter<"BugReport"> | Date | string
    details?: StringFilter<"BugReport"> | string
    endpointId?: StringFilter<"BugReport"> | string
    endpoint?: XOR<EndpointRelationFilter, EndpointWhereInput>
  }

  export type BugReportOrderByWithRelationInput = {
    id?: SortOrder
    report_date?: SortOrder
    solve_date?: SortOrder
    details?: SortOrder
    endpointId?: SortOrder
    endpoint?: EndpointOrderByWithRelationInput
  }

  export type BugReportWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: BugReportWhereInput | BugReportWhereInput[]
    OR?: BugReportWhereInput[]
    NOT?: BugReportWhereInput | BugReportWhereInput[]
    report_date?: DateTimeFilter<"BugReport"> | Date | string
    solve_date?: DateTimeFilter<"BugReport"> | Date | string
    details?: StringFilter<"BugReport"> | string
    endpointId?: StringFilter<"BugReport"> | string
    endpoint?: XOR<EndpointRelationFilter, EndpointWhereInput>
  }, "id">

  export type BugReportOrderByWithAggregationInput = {
    id?: SortOrder
    report_date?: SortOrder
    solve_date?: SortOrder
    details?: SortOrder
    endpointId?: SortOrder
    _count?: BugReportCountOrderByAggregateInput
    _max?: BugReportMaxOrderByAggregateInput
    _min?: BugReportMinOrderByAggregateInput
  }

  export type BugReportScalarWhereWithAggregatesInput = {
    AND?: BugReportScalarWhereWithAggregatesInput | BugReportScalarWhereWithAggregatesInput[]
    OR?: BugReportScalarWhereWithAggregatesInput[]
    NOT?: BugReportScalarWhereWithAggregatesInput | BugReportScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"BugReport"> | string
    report_date?: DateTimeWithAggregatesFilter<"BugReport"> | Date | string
    solve_date?: DateTimeWithAggregatesFilter<"BugReport"> | Date | string
    details?: StringWithAggregatesFilter<"BugReport"> | string
    endpointId?: StringWithAggregatesFilter<"BugReport"> | string
  }

  export type DevCreateInput = {
    id?: string
    name?: string | null
    email: string
    hash: string
    App?: AppCreateNestedManyWithoutDeveloperInput
  }

  export type DevUncheckedCreateInput = {
    id?: string
    name?: string | null
    email: string
    hash: string
    App?: AppUncheckedCreateNestedManyWithoutDeveloperInput
  }

  export type DevUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: NullableStringFieldUpdateOperationsInput | string | null
    email?: StringFieldUpdateOperationsInput | string
    hash?: StringFieldUpdateOperationsInput | string
    App?: AppUpdateManyWithoutDeveloperNestedInput
  }

  export type DevUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: NullableStringFieldUpdateOperationsInput | string | null
    email?: StringFieldUpdateOperationsInput | string
    hash?: StringFieldUpdateOperationsInput | string
    App?: AppUncheckedUpdateManyWithoutDeveloperNestedInput
  }

  export type DevCreateManyInput = {
    id?: string
    name?: string | null
    email: string
    hash: string
  }

  export type DevUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: NullableStringFieldUpdateOperationsInput | string | null
    email?: StringFieldUpdateOperationsInput | string
    hash?: StringFieldUpdateOperationsInput | string
  }

  export type DevUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: NullableStringFieldUpdateOperationsInput | string | null
    email?: StringFieldUpdateOperationsInput | string
    hash?: StringFieldUpdateOperationsInput | string
  }

  export type AppCreateInput = {
    id?: string
    developer: DevCreateNestedOneWithoutAppInput
    Endpoint?: EndpointCreateNestedManyWithoutAppInput
  }

  export type AppUncheckedCreateInput = {
    id?: string
    userId: string
    Endpoint?: EndpointUncheckedCreateNestedManyWithoutAppInput
  }

  export type AppUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    developer?: DevUpdateOneRequiredWithoutAppNestedInput
    Endpoint?: EndpointUpdateManyWithoutAppNestedInput
  }

  export type AppUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    Endpoint?: EndpointUncheckedUpdateManyWithoutAppNestedInput
  }

  export type AppCreateManyInput = {
    id?: string
    userId: string
  }

  export type AppUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
  }

  export type AppUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
  }

  export type EndpointCreateInput = {
    id?: string
    url: string
    headers: string
    body: string
    interval: number
    isBugged: boolean
    app: AppCreateNestedOneWithoutEndpointInput
    EndpointCall?: EndpointCallCreateNestedManyWithoutEndpointInput
    BugReport?: BugReportCreateNestedManyWithoutEndpointInput
  }

  export type EndpointUncheckedCreateInput = {
    id?: string
    appId: string
    url: string
    headers: string
    body: string
    interval: number
    isBugged: boolean
    EndpointCall?: EndpointCallUncheckedCreateNestedManyWithoutEndpointInput
    BugReport?: BugReportUncheckedCreateNestedManyWithoutEndpointInput
  }

  export type EndpointUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    url?: StringFieldUpdateOperationsInput | string
    headers?: StringFieldUpdateOperationsInput | string
    body?: StringFieldUpdateOperationsInput | string
    interval?: IntFieldUpdateOperationsInput | number
    isBugged?: BoolFieldUpdateOperationsInput | boolean
    app?: AppUpdateOneRequiredWithoutEndpointNestedInput
    EndpointCall?: EndpointCallUpdateManyWithoutEndpointNestedInput
    BugReport?: BugReportUpdateManyWithoutEndpointNestedInput
  }

  export type EndpointUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    appId?: StringFieldUpdateOperationsInput | string
    url?: StringFieldUpdateOperationsInput | string
    headers?: StringFieldUpdateOperationsInput | string
    body?: StringFieldUpdateOperationsInput | string
    interval?: IntFieldUpdateOperationsInput | number
    isBugged?: BoolFieldUpdateOperationsInput | boolean
    EndpointCall?: EndpointCallUncheckedUpdateManyWithoutEndpointNestedInput
    BugReport?: BugReportUncheckedUpdateManyWithoutEndpointNestedInput
  }

  export type EndpointCreateManyInput = {
    id?: string
    appId: string
    url: string
    headers: string
    body: string
    interval: number
    isBugged: boolean
  }

  export type EndpointUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    url?: StringFieldUpdateOperationsInput | string
    headers?: StringFieldUpdateOperationsInput | string
    body?: StringFieldUpdateOperationsInput | string
    interval?: IntFieldUpdateOperationsInput | number
    isBugged?: BoolFieldUpdateOperationsInput | boolean
  }

  export type EndpointUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    appId?: StringFieldUpdateOperationsInput | string
    url?: StringFieldUpdateOperationsInput | string
    headers?: StringFieldUpdateOperationsInput | string
    body?: StringFieldUpdateOperationsInput | string
    interval?: IntFieldUpdateOperationsInput | number
    isBugged?: BoolFieldUpdateOperationsInput | boolean
  }

  export type EndpointCallCreateInput = {
    id?: string
    date: Date | string
    duration: number
    status_code: number
    status: string
    endpoint: EndpointCreateNestedOneWithoutEndpointCallInput
  }

  export type EndpointCallUncheckedCreateInput = {
    id?: string
    date: Date | string
    duration: number
    endpointId: string
    status_code: number
    status: string
  }

  export type EndpointCallUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    duration?: IntFieldUpdateOperationsInput | number
    status_code?: IntFieldUpdateOperationsInput | number
    status?: StringFieldUpdateOperationsInput | string
    endpoint?: EndpointUpdateOneRequiredWithoutEndpointCallNestedInput
  }

  export type EndpointCallUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    duration?: IntFieldUpdateOperationsInput | number
    endpointId?: StringFieldUpdateOperationsInput | string
    status_code?: IntFieldUpdateOperationsInput | number
    status?: StringFieldUpdateOperationsInput | string
  }

  export type EndpointCallCreateManyInput = {
    id?: string
    date: Date | string
    duration: number
    endpointId: string
    status_code: number
    status: string
  }

  export type EndpointCallUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    duration?: IntFieldUpdateOperationsInput | number
    status_code?: IntFieldUpdateOperationsInput | number
    status?: StringFieldUpdateOperationsInput | string
  }

  export type EndpointCallUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    duration?: IntFieldUpdateOperationsInput | number
    endpointId?: StringFieldUpdateOperationsInput | string
    status_code?: IntFieldUpdateOperationsInput | number
    status?: StringFieldUpdateOperationsInput | string
  }

  export type BugReportCreateInput = {
    id?: string
    report_date?: Date | string
    solve_date: Date | string
    details: string
    endpoint: EndpointCreateNestedOneWithoutBugReportInput
  }

  export type BugReportUncheckedCreateInput = {
    id?: string
    report_date?: Date | string
    solve_date: Date | string
    details: string
    endpointId: string
  }

  export type BugReportUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    report_date?: DateTimeFieldUpdateOperationsInput | Date | string
    solve_date?: DateTimeFieldUpdateOperationsInput | Date | string
    details?: StringFieldUpdateOperationsInput | string
    endpoint?: EndpointUpdateOneRequiredWithoutBugReportNestedInput
  }

  export type BugReportUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    report_date?: DateTimeFieldUpdateOperationsInput | Date | string
    solve_date?: DateTimeFieldUpdateOperationsInput | Date | string
    details?: StringFieldUpdateOperationsInput | string
    endpointId?: StringFieldUpdateOperationsInput | string
  }

  export type BugReportCreateManyInput = {
    id?: string
    report_date?: Date | string
    solve_date: Date | string
    details: string
    endpointId: string
  }

  export type BugReportUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    report_date?: DateTimeFieldUpdateOperationsInput | Date | string
    solve_date?: DateTimeFieldUpdateOperationsInput | Date | string
    details?: StringFieldUpdateOperationsInput | string
  }

  export type BugReportUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    report_date?: DateTimeFieldUpdateOperationsInput | Date | string
    solve_date?: DateTimeFieldUpdateOperationsInput | Date | string
    details?: StringFieldUpdateOperationsInput | string
    endpointId?: StringFieldUpdateOperationsInput | string
  }

  export type StringFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringFilter<$PrismaModel> | string
  }

  export type StringNullableFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringNullableFilter<$PrismaModel> | string | null
  }

  export type AppListRelationFilter = {
    every?: AppWhereInput
    some?: AppWhereInput
    none?: AppWhereInput
  }

  export type SortOrderInput = {
    sort: SortOrder
    nulls?: NullsOrder
  }

  export type AppOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type DevCountOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    email?: SortOrder
    hash?: SortOrder
  }

  export type DevMaxOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    email?: SortOrder
    hash?: SortOrder
  }

  export type DevMinOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    email?: SortOrder
    hash?: SortOrder
  }

  export type StringWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringWithAggregatesFilter<$PrismaModel> | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedStringFilter<$PrismaModel>
    _max?: NestedStringFilter<$PrismaModel>
  }

  export type StringNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringNullableWithAggregatesFilter<$PrismaModel> | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedStringNullableFilter<$PrismaModel>
    _max?: NestedStringNullableFilter<$PrismaModel>
  }

  export type DevRelationFilter = {
    is?: DevWhereInput
    isNot?: DevWhereInput
  }

  export type EndpointListRelationFilter = {
    every?: EndpointWhereInput
    some?: EndpointWhereInput
    none?: EndpointWhereInput
  }

  export type EndpointOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type AppCountOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
  }

  export type AppMaxOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
  }

  export type AppMinOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
  }

  export type IntFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntFilter<$PrismaModel> | number
  }

  export type BoolFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolFilter<$PrismaModel> | boolean
  }

  export type AppRelationFilter = {
    is?: AppWhereInput
    isNot?: AppWhereInput
  }

  export type EndpointCallListRelationFilter = {
    every?: EndpointCallWhereInput
    some?: EndpointCallWhereInput
    none?: EndpointCallWhereInput
  }

  export type BugReportListRelationFilter = {
    every?: BugReportWhereInput
    some?: BugReportWhereInput
    none?: BugReportWhereInput
  }

  export type EndpointCallOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type BugReportOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type EndpointCountOrderByAggregateInput = {
    id?: SortOrder
    appId?: SortOrder
    url?: SortOrder
    headers?: SortOrder
    body?: SortOrder
    interval?: SortOrder
    isBugged?: SortOrder
  }

  export type EndpointAvgOrderByAggregateInput = {
    interval?: SortOrder
  }

  export type EndpointMaxOrderByAggregateInput = {
    id?: SortOrder
    appId?: SortOrder
    url?: SortOrder
    headers?: SortOrder
    body?: SortOrder
    interval?: SortOrder
    isBugged?: SortOrder
  }

  export type EndpointMinOrderByAggregateInput = {
    id?: SortOrder
    appId?: SortOrder
    url?: SortOrder
    headers?: SortOrder
    body?: SortOrder
    interval?: SortOrder
    isBugged?: SortOrder
  }

  export type EndpointSumOrderByAggregateInput = {
    interval?: SortOrder
  }

  export type IntWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedIntFilter<$PrismaModel>
    _min?: NestedIntFilter<$PrismaModel>
    _max?: NestedIntFilter<$PrismaModel>
  }

  export type BoolWithAggregatesFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolWithAggregatesFilter<$PrismaModel> | boolean
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedBoolFilter<$PrismaModel>
    _max?: NestedBoolFilter<$PrismaModel>
  }

  export type DateTimeFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeFilter<$PrismaModel> | Date | string
  }

  export type EndpointRelationFilter = {
    is?: EndpointWhereInput
    isNot?: EndpointWhereInput
  }

  export type EndpointCallCountOrderByAggregateInput = {
    id?: SortOrder
    date?: SortOrder
    duration?: SortOrder
    endpointId?: SortOrder
    status_code?: SortOrder
    status?: SortOrder
  }

  export type EndpointCallAvgOrderByAggregateInput = {
    duration?: SortOrder
    status_code?: SortOrder
  }

  export type EndpointCallMaxOrderByAggregateInput = {
    id?: SortOrder
    date?: SortOrder
    duration?: SortOrder
    endpointId?: SortOrder
    status_code?: SortOrder
    status?: SortOrder
  }

  export type EndpointCallMinOrderByAggregateInput = {
    id?: SortOrder
    date?: SortOrder
    duration?: SortOrder
    endpointId?: SortOrder
    status_code?: SortOrder
    status?: SortOrder
  }

  export type EndpointCallSumOrderByAggregateInput = {
    duration?: SortOrder
    status_code?: SortOrder
  }

  export type DateTimeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeWithAggregatesFilter<$PrismaModel> | Date | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedDateTimeFilter<$PrismaModel>
    _max?: NestedDateTimeFilter<$PrismaModel>
  }

  export type BugReportCountOrderByAggregateInput = {
    id?: SortOrder
    report_date?: SortOrder
    solve_date?: SortOrder
    details?: SortOrder
    endpointId?: SortOrder
  }

  export type BugReportMaxOrderByAggregateInput = {
    id?: SortOrder
    report_date?: SortOrder
    solve_date?: SortOrder
    details?: SortOrder
    endpointId?: SortOrder
  }

  export type BugReportMinOrderByAggregateInput = {
    id?: SortOrder
    report_date?: SortOrder
    solve_date?: SortOrder
    details?: SortOrder
    endpointId?: SortOrder
  }

  export type AppCreateNestedManyWithoutDeveloperInput = {
    create?: XOR<AppCreateWithoutDeveloperInput, AppUncheckedCreateWithoutDeveloperInput> | AppCreateWithoutDeveloperInput[] | AppUncheckedCreateWithoutDeveloperInput[]
    connectOrCreate?: AppCreateOrConnectWithoutDeveloperInput | AppCreateOrConnectWithoutDeveloperInput[]
    createMany?: AppCreateManyDeveloperInputEnvelope
    connect?: AppWhereUniqueInput | AppWhereUniqueInput[]
  }

  export type AppUncheckedCreateNestedManyWithoutDeveloperInput = {
    create?: XOR<AppCreateWithoutDeveloperInput, AppUncheckedCreateWithoutDeveloperInput> | AppCreateWithoutDeveloperInput[] | AppUncheckedCreateWithoutDeveloperInput[]
    connectOrCreate?: AppCreateOrConnectWithoutDeveloperInput | AppCreateOrConnectWithoutDeveloperInput[]
    createMany?: AppCreateManyDeveloperInputEnvelope
    connect?: AppWhereUniqueInput | AppWhereUniqueInput[]
  }

  export type StringFieldUpdateOperationsInput = {
    set?: string
  }

  export type NullableStringFieldUpdateOperationsInput = {
    set?: string | null
  }

  export type AppUpdateManyWithoutDeveloperNestedInput = {
    create?: XOR<AppCreateWithoutDeveloperInput, AppUncheckedCreateWithoutDeveloperInput> | AppCreateWithoutDeveloperInput[] | AppUncheckedCreateWithoutDeveloperInput[]
    connectOrCreate?: AppCreateOrConnectWithoutDeveloperInput | AppCreateOrConnectWithoutDeveloperInput[]
    upsert?: AppUpsertWithWhereUniqueWithoutDeveloperInput | AppUpsertWithWhereUniqueWithoutDeveloperInput[]
    createMany?: AppCreateManyDeveloperInputEnvelope
    set?: AppWhereUniqueInput | AppWhereUniqueInput[]
    disconnect?: AppWhereUniqueInput | AppWhereUniqueInput[]
    delete?: AppWhereUniqueInput | AppWhereUniqueInput[]
    connect?: AppWhereUniqueInput | AppWhereUniqueInput[]
    update?: AppUpdateWithWhereUniqueWithoutDeveloperInput | AppUpdateWithWhereUniqueWithoutDeveloperInput[]
    updateMany?: AppUpdateManyWithWhereWithoutDeveloperInput | AppUpdateManyWithWhereWithoutDeveloperInput[]
    deleteMany?: AppScalarWhereInput | AppScalarWhereInput[]
  }

  export type AppUncheckedUpdateManyWithoutDeveloperNestedInput = {
    create?: XOR<AppCreateWithoutDeveloperInput, AppUncheckedCreateWithoutDeveloperInput> | AppCreateWithoutDeveloperInput[] | AppUncheckedCreateWithoutDeveloperInput[]
    connectOrCreate?: AppCreateOrConnectWithoutDeveloperInput | AppCreateOrConnectWithoutDeveloperInput[]
    upsert?: AppUpsertWithWhereUniqueWithoutDeveloperInput | AppUpsertWithWhereUniqueWithoutDeveloperInput[]
    createMany?: AppCreateManyDeveloperInputEnvelope
    set?: AppWhereUniqueInput | AppWhereUniqueInput[]
    disconnect?: AppWhereUniqueInput | AppWhereUniqueInput[]
    delete?: AppWhereUniqueInput | AppWhereUniqueInput[]
    connect?: AppWhereUniqueInput | AppWhereUniqueInput[]
    update?: AppUpdateWithWhereUniqueWithoutDeveloperInput | AppUpdateWithWhereUniqueWithoutDeveloperInput[]
    updateMany?: AppUpdateManyWithWhereWithoutDeveloperInput | AppUpdateManyWithWhereWithoutDeveloperInput[]
    deleteMany?: AppScalarWhereInput | AppScalarWhereInput[]
  }

  export type DevCreateNestedOneWithoutAppInput = {
    create?: XOR<DevCreateWithoutAppInput, DevUncheckedCreateWithoutAppInput>
    connectOrCreate?: DevCreateOrConnectWithoutAppInput
    connect?: DevWhereUniqueInput
  }

  export type EndpointCreateNestedManyWithoutAppInput = {
    create?: XOR<EndpointCreateWithoutAppInput, EndpointUncheckedCreateWithoutAppInput> | EndpointCreateWithoutAppInput[] | EndpointUncheckedCreateWithoutAppInput[]
    connectOrCreate?: EndpointCreateOrConnectWithoutAppInput | EndpointCreateOrConnectWithoutAppInput[]
    createMany?: EndpointCreateManyAppInputEnvelope
    connect?: EndpointWhereUniqueInput | EndpointWhereUniqueInput[]
  }

  export type EndpointUncheckedCreateNestedManyWithoutAppInput = {
    create?: XOR<EndpointCreateWithoutAppInput, EndpointUncheckedCreateWithoutAppInput> | EndpointCreateWithoutAppInput[] | EndpointUncheckedCreateWithoutAppInput[]
    connectOrCreate?: EndpointCreateOrConnectWithoutAppInput | EndpointCreateOrConnectWithoutAppInput[]
    createMany?: EndpointCreateManyAppInputEnvelope
    connect?: EndpointWhereUniqueInput | EndpointWhereUniqueInput[]
  }

  export type DevUpdateOneRequiredWithoutAppNestedInput = {
    create?: XOR<DevCreateWithoutAppInput, DevUncheckedCreateWithoutAppInput>
    connectOrCreate?: DevCreateOrConnectWithoutAppInput
    upsert?: DevUpsertWithoutAppInput
    connect?: DevWhereUniqueInput
    update?: XOR<XOR<DevUpdateToOneWithWhereWithoutAppInput, DevUpdateWithoutAppInput>, DevUncheckedUpdateWithoutAppInput>
  }

  export type EndpointUpdateManyWithoutAppNestedInput = {
    create?: XOR<EndpointCreateWithoutAppInput, EndpointUncheckedCreateWithoutAppInput> | EndpointCreateWithoutAppInput[] | EndpointUncheckedCreateWithoutAppInput[]
    connectOrCreate?: EndpointCreateOrConnectWithoutAppInput | EndpointCreateOrConnectWithoutAppInput[]
    upsert?: EndpointUpsertWithWhereUniqueWithoutAppInput | EndpointUpsertWithWhereUniqueWithoutAppInput[]
    createMany?: EndpointCreateManyAppInputEnvelope
    set?: EndpointWhereUniqueInput | EndpointWhereUniqueInput[]
    disconnect?: EndpointWhereUniqueInput | EndpointWhereUniqueInput[]
    delete?: EndpointWhereUniqueInput | EndpointWhereUniqueInput[]
    connect?: EndpointWhereUniqueInput | EndpointWhereUniqueInput[]
    update?: EndpointUpdateWithWhereUniqueWithoutAppInput | EndpointUpdateWithWhereUniqueWithoutAppInput[]
    updateMany?: EndpointUpdateManyWithWhereWithoutAppInput | EndpointUpdateManyWithWhereWithoutAppInput[]
    deleteMany?: EndpointScalarWhereInput | EndpointScalarWhereInput[]
  }

  export type EndpointUncheckedUpdateManyWithoutAppNestedInput = {
    create?: XOR<EndpointCreateWithoutAppInput, EndpointUncheckedCreateWithoutAppInput> | EndpointCreateWithoutAppInput[] | EndpointUncheckedCreateWithoutAppInput[]
    connectOrCreate?: EndpointCreateOrConnectWithoutAppInput | EndpointCreateOrConnectWithoutAppInput[]
    upsert?: EndpointUpsertWithWhereUniqueWithoutAppInput | EndpointUpsertWithWhereUniqueWithoutAppInput[]
    createMany?: EndpointCreateManyAppInputEnvelope
    set?: EndpointWhereUniqueInput | EndpointWhereUniqueInput[]
    disconnect?: EndpointWhereUniqueInput | EndpointWhereUniqueInput[]
    delete?: EndpointWhereUniqueInput | EndpointWhereUniqueInput[]
    connect?: EndpointWhereUniqueInput | EndpointWhereUniqueInput[]
    update?: EndpointUpdateWithWhereUniqueWithoutAppInput | EndpointUpdateWithWhereUniqueWithoutAppInput[]
    updateMany?: EndpointUpdateManyWithWhereWithoutAppInput | EndpointUpdateManyWithWhereWithoutAppInput[]
    deleteMany?: EndpointScalarWhereInput | EndpointScalarWhereInput[]
  }

  export type AppCreateNestedOneWithoutEndpointInput = {
    create?: XOR<AppCreateWithoutEndpointInput, AppUncheckedCreateWithoutEndpointInput>
    connectOrCreate?: AppCreateOrConnectWithoutEndpointInput
    connect?: AppWhereUniqueInput
  }

  export type EndpointCallCreateNestedManyWithoutEndpointInput = {
    create?: XOR<EndpointCallCreateWithoutEndpointInput, EndpointCallUncheckedCreateWithoutEndpointInput> | EndpointCallCreateWithoutEndpointInput[] | EndpointCallUncheckedCreateWithoutEndpointInput[]
    connectOrCreate?: EndpointCallCreateOrConnectWithoutEndpointInput | EndpointCallCreateOrConnectWithoutEndpointInput[]
    createMany?: EndpointCallCreateManyEndpointInputEnvelope
    connect?: EndpointCallWhereUniqueInput | EndpointCallWhereUniqueInput[]
  }

  export type BugReportCreateNestedManyWithoutEndpointInput = {
    create?: XOR<BugReportCreateWithoutEndpointInput, BugReportUncheckedCreateWithoutEndpointInput> | BugReportCreateWithoutEndpointInput[] | BugReportUncheckedCreateWithoutEndpointInput[]
    connectOrCreate?: BugReportCreateOrConnectWithoutEndpointInput | BugReportCreateOrConnectWithoutEndpointInput[]
    createMany?: BugReportCreateManyEndpointInputEnvelope
    connect?: BugReportWhereUniqueInput | BugReportWhereUniqueInput[]
  }

  export type EndpointCallUncheckedCreateNestedManyWithoutEndpointInput = {
    create?: XOR<EndpointCallCreateWithoutEndpointInput, EndpointCallUncheckedCreateWithoutEndpointInput> | EndpointCallCreateWithoutEndpointInput[] | EndpointCallUncheckedCreateWithoutEndpointInput[]
    connectOrCreate?: EndpointCallCreateOrConnectWithoutEndpointInput | EndpointCallCreateOrConnectWithoutEndpointInput[]
    createMany?: EndpointCallCreateManyEndpointInputEnvelope
    connect?: EndpointCallWhereUniqueInput | EndpointCallWhereUniqueInput[]
  }

  export type BugReportUncheckedCreateNestedManyWithoutEndpointInput = {
    create?: XOR<BugReportCreateWithoutEndpointInput, BugReportUncheckedCreateWithoutEndpointInput> | BugReportCreateWithoutEndpointInput[] | BugReportUncheckedCreateWithoutEndpointInput[]
    connectOrCreate?: BugReportCreateOrConnectWithoutEndpointInput | BugReportCreateOrConnectWithoutEndpointInput[]
    createMany?: BugReportCreateManyEndpointInputEnvelope
    connect?: BugReportWhereUniqueInput | BugReportWhereUniqueInput[]
  }

  export type IntFieldUpdateOperationsInput = {
    set?: number
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type BoolFieldUpdateOperationsInput = {
    set?: boolean
  }

  export type AppUpdateOneRequiredWithoutEndpointNestedInput = {
    create?: XOR<AppCreateWithoutEndpointInput, AppUncheckedCreateWithoutEndpointInput>
    connectOrCreate?: AppCreateOrConnectWithoutEndpointInput
    upsert?: AppUpsertWithoutEndpointInput
    connect?: AppWhereUniqueInput
    update?: XOR<XOR<AppUpdateToOneWithWhereWithoutEndpointInput, AppUpdateWithoutEndpointInput>, AppUncheckedUpdateWithoutEndpointInput>
  }

  export type EndpointCallUpdateManyWithoutEndpointNestedInput = {
    create?: XOR<EndpointCallCreateWithoutEndpointInput, EndpointCallUncheckedCreateWithoutEndpointInput> | EndpointCallCreateWithoutEndpointInput[] | EndpointCallUncheckedCreateWithoutEndpointInput[]
    connectOrCreate?: EndpointCallCreateOrConnectWithoutEndpointInput | EndpointCallCreateOrConnectWithoutEndpointInput[]
    upsert?: EndpointCallUpsertWithWhereUniqueWithoutEndpointInput | EndpointCallUpsertWithWhereUniqueWithoutEndpointInput[]
    createMany?: EndpointCallCreateManyEndpointInputEnvelope
    set?: EndpointCallWhereUniqueInput | EndpointCallWhereUniqueInput[]
    disconnect?: EndpointCallWhereUniqueInput | EndpointCallWhereUniqueInput[]
    delete?: EndpointCallWhereUniqueInput | EndpointCallWhereUniqueInput[]
    connect?: EndpointCallWhereUniqueInput | EndpointCallWhereUniqueInput[]
    update?: EndpointCallUpdateWithWhereUniqueWithoutEndpointInput | EndpointCallUpdateWithWhereUniqueWithoutEndpointInput[]
    updateMany?: EndpointCallUpdateManyWithWhereWithoutEndpointInput | EndpointCallUpdateManyWithWhereWithoutEndpointInput[]
    deleteMany?: EndpointCallScalarWhereInput | EndpointCallScalarWhereInput[]
  }

  export type BugReportUpdateManyWithoutEndpointNestedInput = {
    create?: XOR<BugReportCreateWithoutEndpointInput, BugReportUncheckedCreateWithoutEndpointInput> | BugReportCreateWithoutEndpointInput[] | BugReportUncheckedCreateWithoutEndpointInput[]
    connectOrCreate?: BugReportCreateOrConnectWithoutEndpointInput | BugReportCreateOrConnectWithoutEndpointInput[]
    upsert?: BugReportUpsertWithWhereUniqueWithoutEndpointInput | BugReportUpsertWithWhereUniqueWithoutEndpointInput[]
    createMany?: BugReportCreateManyEndpointInputEnvelope
    set?: BugReportWhereUniqueInput | BugReportWhereUniqueInput[]
    disconnect?: BugReportWhereUniqueInput | BugReportWhereUniqueInput[]
    delete?: BugReportWhereUniqueInput | BugReportWhereUniqueInput[]
    connect?: BugReportWhereUniqueInput | BugReportWhereUniqueInput[]
    update?: BugReportUpdateWithWhereUniqueWithoutEndpointInput | BugReportUpdateWithWhereUniqueWithoutEndpointInput[]
    updateMany?: BugReportUpdateManyWithWhereWithoutEndpointInput | BugReportUpdateManyWithWhereWithoutEndpointInput[]
    deleteMany?: BugReportScalarWhereInput | BugReportScalarWhereInput[]
  }

  export type EndpointCallUncheckedUpdateManyWithoutEndpointNestedInput = {
    create?: XOR<EndpointCallCreateWithoutEndpointInput, EndpointCallUncheckedCreateWithoutEndpointInput> | EndpointCallCreateWithoutEndpointInput[] | EndpointCallUncheckedCreateWithoutEndpointInput[]
    connectOrCreate?: EndpointCallCreateOrConnectWithoutEndpointInput | EndpointCallCreateOrConnectWithoutEndpointInput[]
    upsert?: EndpointCallUpsertWithWhereUniqueWithoutEndpointInput | EndpointCallUpsertWithWhereUniqueWithoutEndpointInput[]
    createMany?: EndpointCallCreateManyEndpointInputEnvelope
    set?: EndpointCallWhereUniqueInput | EndpointCallWhereUniqueInput[]
    disconnect?: EndpointCallWhereUniqueInput | EndpointCallWhereUniqueInput[]
    delete?: EndpointCallWhereUniqueInput | EndpointCallWhereUniqueInput[]
    connect?: EndpointCallWhereUniqueInput | EndpointCallWhereUniqueInput[]
    update?: EndpointCallUpdateWithWhereUniqueWithoutEndpointInput | EndpointCallUpdateWithWhereUniqueWithoutEndpointInput[]
    updateMany?: EndpointCallUpdateManyWithWhereWithoutEndpointInput | EndpointCallUpdateManyWithWhereWithoutEndpointInput[]
    deleteMany?: EndpointCallScalarWhereInput | EndpointCallScalarWhereInput[]
  }

  export type BugReportUncheckedUpdateManyWithoutEndpointNestedInput = {
    create?: XOR<BugReportCreateWithoutEndpointInput, BugReportUncheckedCreateWithoutEndpointInput> | BugReportCreateWithoutEndpointInput[] | BugReportUncheckedCreateWithoutEndpointInput[]
    connectOrCreate?: BugReportCreateOrConnectWithoutEndpointInput | BugReportCreateOrConnectWithoutEndpointInput[]
    upsert?: BugReportUpsertWithWhereUniqueWithoutEndpointInput | BugReportUpsertWithWhereUniqueWithoutEndpointInput[]
    createMany?: BugReportCreateManyEndpointInputEnvelope
    set?: BugReportWhereUniqueInput | BugReportWhereUniqueInput[]
    disconnect?: BugReportWhereUniqueInput | BugReportWhereUniqueInput[]
    delete?: BugReportWhereUniqueInput | BugReportWhereUniqueInput[]
    connect?: BugReportWhereUniqueInput | BugReportWhereUniqueInput[]
    update?: BugReportUpdateWithWhereUniqueWithoutEndpointInput | BugReportUpdateWithWhereUniqueWithoutEndpointInput[]
    updateMany?: BugReportUpdateManyWithWhereWithoutEndpointInput | BugReportUpdateManyWithWhereWithoutEndpointInput[]
    deleteMany?: BugReportScalarWhereInput | BugReportScalarWhereInput[]
  }

  export type EndpointCreateNestedOneWithoutEndpointCallInput = {
    create?: XOR<EndpointCreateWithoutEndpointCallInput, EndpointUncheckedCreateWithoutEndpointCallInput>
    connectOrCreate?: EndpointCreateOrConnectWithoutEndpointCallInput
    connect?: EndpointWhereUniqueInput
  }

  export type DateTimeFieldUpdateOperationsInput = {
    set?: Date | string
  }

  export type EndpointUpdateOneRequiredWithoutEndpointCallNestedInput = {
    create?: XOR<EndpointCreateWithoutEndpointCallInput, EndpointUncheckedCreateWithoutEndpointCallInput>
    connectOrCreate?: EndpointCreateOrConnectWithoutEndpointCallInput
    upsert?: EndpointUpsertWithoutEndpointCallInput
    connect?: EndpointWhereUniqueInput
    update?: XOR<XOR<EndpointUpdateToOneWithWhereWithoutEndpointCallInput, EndpointUpdateWithoutEndpointCallInput>, EndpointUncheckedUpdateWithoutEndpointCallInput>
  }

  export type EndpointCreateNestedOneWithoutBugReportInput = {
    create?: XOR<EndpointCreateWithoutBugReportInput, EndpointUncheckedCreateWithoutBugReportInput>
    connectOrCreate?: EndpointCreateOrConnectWithoutBugReportInput
    connect?: EndpointWhereUniqueInput
  }

  export type EndpointUpdateOneRequiredWithoutBugReportNestedInput = {
    create?: XOR<EndpointCreateWithoutBugReportInput, EndpointUncheckedCreateWithoutBugReportInput>
    connectOrCreate?: EndpointCreateOrConnectWithoutBugReportInput
    upsert?: EndpointUpsertWithoutBugReportInput
    connect?: EndpointWhereUniqueInput
    update?: XOR<XOR<EndpointUpdateToOneWithWhereWithoutBugReportInput, EndpointUpdateWithoutBugReportInput>, EndpointUncheckedUpdateWithoutBugReportInput>
  }

  export type NestedStringFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringFilter<$PrismaModel> | string
  }

  export type NestedStringNullableFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringNullableFilter<$PrismaModel> | string | null
  }

  export type NestedStringWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringWithAggregatesFilter<$PrismaModel> | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedStringFilter<$PrismaModel>
    _max?: NestedStringFilter<$PrismaModel>
  }

  export type NestedIntFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntFilter<$PrismaModel> | number
  }

  export type NestedStringNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringNullableWithAggregatesFilter<$PrismaModel> | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedStringNullableFilter<$PrismaModel>
    _max?: NestedStringNullableFilter<$PrismaModel>
  }

  export type NestedIntNullableFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableFilter<$PrismaModel> | number | null
  }

  export type NestedBoolFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolFilter<$PrismaModel> | boolean
  }

  export type NestedIntWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedIntFilter<$PrismaModel>
    _min?: NestedIntFilter<$PrismaModel>
    _max?: NestedIntFilter<$PrismaModel>
  }

  export type NestedFloatFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel>
    in?: number[] | ListFloatFieldRefInput<$PrismaModel>
    notIn?: number[] | ListFloatFieldRefInput<$PrismaModel>
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatFilter<$PrismaModel> | number
  }

  export type NestedBoolWithAggregatesFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolWithAggregatesFilter<$PrismaModel> | boolean
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedBoolFilter<$PrismaModel>
    _max?: NestedBoolFilter<$PrismaModel>
  }

  export type NestedDateTimeFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeFilter<$PrismaModel> | Date | string
  }

  export type NestedDateTimeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeWithAggregatesFilter<$PrismaModel> | Date | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedDateTimeFilter<$PrismaModel>
    _max?: NestedDateTimeFilter<$PrismaModel>
  }

  export type AppCreateWithoutDeveloperInput = {
    id?: string
    Endpoint?: EndpointCreateNestedManyWithoutAppInput
  }

  export type AppUncheckedCreateWithoutDeveloperInput = {
    id?: string
    Endpoint?: EndpointUncheckedCreateNestedManyWithoutAppInput
  }

  export type AppCreateOrConnectWithoutDeveloperInput = {
    where: AppWhereUniqueInput
    create: XOR<AppCreateWithoutDeveloperInput, AppUncheckedCreateWithoutDeveloperInput>
  }

  export type AppCreateManyDeveloperInputEnvelope = {
    data: AppCreateManyDeveloperInput | AppCreateManyDeveloperInput[]
    skipDuplicates?: boolean
  }

  export type AppUpsertWithWhereUniqueWithoutDeveloperInput = {
    where: AppWhereUniqueInput
    update: XOR<AppUpdateWithoutDeveloperInput, AppUncheckedUpdateWithoutDeveloperInput>
    create: XOR<AppCreateWithoutDeveloperInput, AppUncheckedCreateWithoutDeveloperInput>
  }

  export type AppUpdateWithWhereUniqueWithoutDeveloperInput = {
    where: AppWhereUniqueInput
    data: XOR<AppUpdateWithoutDeveloperInput, AppUncheckedUpdateWithoutDeveloperInput>
  }

  export type AppUpdateManyWithWhereWithoutDeveloperInput = {
    where: AppScalarWhereInput
    data: XOR<AppUpdateManyMutationInput, AppUncheckedUpdateManyWithoutDeveloperInput>
  }

  export type AppScalarWhereInput = {
    AND?: AppScalarWhereInput | AppScalarWhereInput[]
    OR?: AppScalarWhereInput[]
    NOT?: AppScalarWhereInput | AppScalarWhereInput[]
    id?: StringFilter<"App"> | string
    userId?: StringFilter<"App"> | string
  }

  export type DevCreateWithoutAppInput = {
    id?: string
    name?: string | null
    email: string
    hash: string
  }

  export type DevUncheckedCreateWithoutAppInput = {
    id?: string
    name?: string | null
    email: string
    hash: string
  }

  export type DevCreateOrConnectWithoutAppInput = {
    where: DevWhereUniqueInput
    create: XOR<DevCreateWithoutAppInput, DevUncheckedCreateWithoutAppInput>
  }

  export type EndpointCreateWithoutAppInput = {
    id?: string
    url: string
    headers: string
    body: string
    interval: number
    isBugged: boolean
    EndpointCall?: EndpointCallCreateNestedManyWithoutEndpointInput
    BugReport?: BugReportCreateNestedManyWithoutEndpointInput
  }

  export type EndpointUncheckedCreateWithoutAppInput = {
    id?: string
    url: string
    headers: string
    body: string
    interval: number
    isBugged: boolean
    EndpointCall?: EndpointCallUncheckedCreateNestedManyWithoutEndpointInput
    BugReport?: BugReportUncheckedCreateNestedManyWithoutEndpointInput
  }

  export type EndpointCreateOrConnectWithoutAppInput = {
    where: EndpointWhereUniqueInput
    create: XOR<EndpointCreateWithoutAppInput, EndpointUncheckedCreateWithoutAppInput>
  }

  export type EndpointCreateManyAppInputEnvelope = {
    data: EndpointCreateManyAppInput | EndpointCreateManyAppInput[]
    skipDuplicates?: boolean
  }

  export type DevUpsertWithoutAppInput = {
    update: XOR<DevUpdateWithoutAppInput, DevUncheckedUpdateWithoutAppInput>
    create: XOR<DevCreateWithoutAppInput, DevUncheckedCreateWithoutAppInput>
    where?: DevWhereInput
  }

  export type DevUpdateToOneWithWhereWithoutAppInput = {
    where?: DevWhereInput
    data: XOR<DevUpdateWithoutAppInput, DevUncheckedUpdateWithoutAppInput>
  }

  export type DevUpdateWithoutAppInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: NullableStringFieldUpdateOperationsInput | string | null
    email?: StringFieldUpdateOperationsInput | string
    hash?: StringFieldUpdateOperationsInput | string
  }

  export type DevUncheckedUpdateWithoutAppInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: NullableStringFieldUpdateOperationsInput | string | null
    email?: StringFieldUpdateOperationsInput | string
    hash?: StringFieldUpdateOperationsInput | string
  }

  export type EndpointUpsertWithWhereUniqueWithoutAppInput = {
    where: EndpointWhereUniqueInput
    update: XOR<EndpointUpdateWithoutAppInput, EndpointUncheckedUpdateWithoutAppInput>
    create: XOR<EndpointCreateWithoutAppInput, EndpointUncheckedCreateWithoutAppInput>
  }

  export type EndpointUpdateWithWhereUniqueWithoutAppInput = {
    where: EndpointWhereUniqueInput
    data: XOR<EndpointUpdateWithoutAppInput, EndpointUncheckedUpdateWithoutAppInput>
  }

  export type EndpointUpdateManyWithWhereWithoutAppInput = {
    where: EndpointScalarWhereInput
    data: XOR<EndpointUpdateManyMutationInput, EndpointUncheckedUpdateManyWithoutAppInput>
  }

  export type EndpointScalarWhereInput = {
    AND?: EndpointScalarWhereInput | EndpointScalarWhereInput[]
    OR?: EndpointScalarWhereInput[]
    NOT?: EndpointScalarWhereInput | EndpointScalarWhereInput[]
    id?: StringFilter<"Endpoint"> | string
    appId?: StringFilter<"Endpoint"> | string
    url?: StringFilter<"Endpoint"> | string
    headers?: StringFilter<"Endpoint"> | string
    body?: StringFilter<"Endpoint"> | string
    interval?: IntFilter<"Endpoint"> | number
    isBugged?: BoolFilter<"Endpoint"> | boolean
  }

  export type AppCreateWithoutEndpointInput = {
    id?: string
    developer: DevCreateNestedOneWithoutAppInput
  }

  export type AppUncheckedCreateWithoutEndpointInput = {
    id?: string
    userId: string
  }

  export type AppCreateOrConnectWithoutEndpointInput = {
    where: AppWhereUniqueInput
    create: XOR<AppCreateWithoutEndpointInput, AppUncheckedCreateWithoutEndpointInput>
  }

  export type EndpointCallCreateWithoutEndpointInput = {
    id?: string
    date: Date | string
    duration: number
    status_code: number
    status: string
  }

  export type EndpointCallUncheckedCreateWithoutEndpointInput = {
    id?: string
    date: Date | string
    duration: number
    status_code: number
    status: string
  }

  export type EndpointCallCreateOrConnectWithoutEndpointInput = {
    where: EndpointCallWhereUniqueInput
    create: XOR<EndpointCallCreateWithoutEndpointInput, EndpointCallUncheckedCreateWithoutEndpointInput>
  }

  export type EndpointCallCreateManyEndpointInputEnvelope = {
    data: EndpointCallCreateManyEndpointInput | EndpointCallCreateManyEndpointInput[]
    skipDuplicates?: boolean
  }

  export type BugReportCreateWithoutEndpointInput = {
    id?: string
    report_date?: Date | string
    solve_date: Date | string
    details: string
  }

  export type BugReportUncheckedCreateWithoutEndpointInput = {
    id?: string
    report_date?: Date | string
    solve_date: Date | string
    details: string
  }

  export type BugReportCreateOrConnectWithoutEndpointInput = {
    where: BugReportWhereUniqueInput
    create: XOR<BugReportCreateWithoutEndpointInput, BugReportUncheckedCreateWithoutEndpointInput>
  }

  export type BugReportCreateManyEndpointInputEnvelope = {
    data: BugReportCreateManyEndpointInput | BugReportCreateManyEndpointInput[]
    skipDuplicates?: boolean
  }

  export type AppUpsertWithoutEndpointInput = {
    update: XOR<AppUpdateWithoutEndpointInput, AppUncheckedUpdateWithoutEndpointInput>
    create: XOR<AppCreateWithoutEndpointInput, AppUncheckedCreateWithoutEndpointInput>
    where?: AppWhereInput
  }

  export type AppUpdateToOneWithWhereWithoutEndpointInput = {
    where?: AppWhereInput
    data: XOR<AppUpdateWithoutEndpointInput, AppUncheckedUpdateWithoutEndpointInput>
  }

  export type AppUpdateWithoutEndpointInput = {
    id?: StringFieldUpdateOperationsInput | string
    developer?: DevUpdateOneRequiredWithoutAppNestedInput
  }

  export type AppUncheckedUpdateWithoutEndpointInput = {
    id?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
  }

  export type EndpointCallUpsertWithWhereUniqueWithoutEndpointInput = {
    where: EndpointCallWhereUniqueInput
    update: XOR<EndpointCallUpdateWithoutEndpointInput, EndpointCallUncheckedUpdateWithoutEndpointInput>
    create: XOR<EndpointCallCreateWithoutEndpointInput, EndpointCallUncheckedCreateWithoutEndpointInput>
  }

  export type EndpointCallUpdateWithWhereUniqueWithoutEndpointInput = {
    where: EndpointCallWhereUniqueInput
    data: XOR<EndpointCallUpdateWithoutEndpointInput, EndpointCallUncheckedUpdateWithoutEndpointInput>
  }

  export type EndpointCallUpdateManyWithWhereWithoutEndpointInput = {
    where: EndpointCallScalarWhereInput
    data: XOR<EndpointCallUpdateManyMutationInput, EndpointCallUncheckedUpdateManyWithoutEndpointInput>
  }

  export type EndpointCallScalarWhereInput = {
    AND?: EndpointCallScalarWhereInput | EndpointCallScalarWhereInput[]
    OR?: EndpointCallScalarWhereInput[]
    NOT?: EndpointCallScalarWhereInput | EndpointCallScalarWhereInput[]
    id?: StringFilter<"EndpointCall"> | string
    date?: DateTimeFilter<"EndpointCall"> | Date | string
    duration?: IntFilter<"EndpointCall"> | number
    endpointId?: StringFilter<"EndpointCall"> | string
    status_code?: IntFilter<"EndpointCall"> | number
    status?: StringFilter<"EndpointCall"> | string
  }

  export type BugReportUpsertWithWhereUniqueWithoutEndpointInput = {
    where: BugReportWhereUniqueInput
    update: XOR<BugReportUpdateWithoutEndpointInput, BugReportUncheckedUpdateWithoutEndpointInput>
    create: XOR<BugReportCreateWithoutEndpointInput, BugReportUncheckedCreateWithoutEndpointInput>
  }

  export type BugReportUpdateWithWhereUniqueWithoutEndpointInput = {
    where: BugReportWhereUniqueInput
    data: XOR<BugReportUpdateWithoutEndpointInput, BugReportUncheckedUpdateWithoutEndpointInput>
  }

  export type BugReportUpdateManyWithWhereWithoutEndpointInput = {
    where: BugReportScalarWhereInput
    data: XOR<BugReportUpdateManyMutationInput, BugReportUncheckedUpdateManyWithoutEndpointInput>
  }

  export type BugReportScalarWhereInput = {
    AND?: BugReportScalarWhereInput | BugReportScalarWhereInput[]
    OR?: BugReportScalarWhereInput[]
    NOT?: BugReportScalarWhereInput | BugReportScalarWhereInput[]
    id?: StringFilter<"BugReport"> | string
    report_date?: DateTimeFilter<"BugReport"> | Date | string
    solve_date?: DateTimeFilter<"BugReport"> | Date | string
    details?: StringFilter<"BugReport"> | string
    endpointId?: StringFilter<"BugReport"> | string
  }

  export type EndpointCreateWithoutEndpointCallInput = {
    id?: string
    url: string
    headers: string
    body: string
    interval: number
    isBugged: boolean
    app: AppCreateNestedOneWithoutEndpointInput
    BugReport?: BugReportCreateNestedManyWithoutEndpointInput
  }

  export type EndpointUncheckedCreateWithoutEndpointCallInput = {
    id?: string
    appId: string
    url: string
    headers: string
    body: string
    interval: number
    isBugged: boolean
    BugReport?: BugReportUncheckedCreateNestedManyWithoutEndpointInput
  }

  export type EndpointCreateOrConnectWithoutEndpointCallInput = {
    where: EndpointWhereUniqueInput
    create: XOR<EndpointCreateWithoutEndpointCallInput, EndpointUncheckedCreateWithoutEndpointCallInput>
  }

  export type EndpointUpsertWithoutEndpointCallInput = {
    update: XOR<EndpointUpdateWithoutEndpointCallInput, EndpointUncheckedUpdateWithoutEndpointCallInput>
    create: XOR<EndpointCreateWithoutEndpointCallInput, EndpointUncheckedCreateWithoutEndpointCallInput>
    where?: EndpointWhereInput
  }

  export type EndpointUpdateToOneWithWhereWithoutEndpointCallInput = {
    where?: EndpointWhereInput
    data: XOR<EndpointUpdateWithoutEndpointCallInput, EndpointUncheckedUpdateWithoutEndpointCallInput>
  }

  export type EndpointUpdateWithoutEndpointCallInput = {
    id?: StringFieldUpdateOperationsInput | string
    url?: StringFieldUpdateOperationsInput | string
    headers?: StringFieldUpdateOperationsInput | string
    body?: StringFieldUpdateOperationsInput | string
    interval?: IntFieldUpdateOperationsInput | number
    isBugged?: BoolFieldUpdateOperationsInput | boolean
    app?: AppUpdateOneRequiredWithoutEndpointNestedInput
    BugReport?: BugReportUpdateManyWithoutEndpointNestedInput
  }

  export type EndpointUncheckedUpdateWithoutEndpointCallInput = {
    id?: StringFieldUpdateOperationsInput | string
    appId?: StringFieldUpdateOperationsInput | string
    url?: StringFieldUpdateOperationsInput | string
    headers?: StringFieldUpdateOperationsInput | string
    body?: StringFieldUpdateOperationsInput | string
    interval?: IntFieldUpdateOperationsInput | number
    isBugged?: BoolFieldUpdateOperationsInput | boolean
    BugReport?: BugReportUncheckedUpdateManyWithoutEndpointNestedInput
  }

  export type EndpointCreateWithoutBugReportInput = {
    id?: string
    url: string
    headers: string
    body: string
    interval: number
    isBugged: boolean
    app: AppCreateNestedOneWithoutEndpointInput
    EndpointCall?: EndpointCallCreateNestedManyWithoutEndpointInput
  }

  export type EndpointUncheckedCreateWithoutBugReportInput = {
    id?: string
    appId: string
    url: string
    headers: string
    body: string
    interval: number
    isBugged: boolean
    EndpointCall?: EndpointCallUncheckedCreateNestedManyWithoutEndpointInput
  }

  export type EndpointCreateOrConnectWithoutBugReportInput = {
    where: EndpointWhereUniqueInput
    create: XOR<EndpointCreateWithoutBugReportInput, EndpointUncheckedCreateWithoutBugReportInput>
  }

  export type EndpointUpsertWithoutBugReportInput = {
    update: XOR<EndpointUpdateWithoutBugReportInput, EndpointUncheckedUpdateWithoutBugReportInput>
    create: XOR<EndpointCreateWithoutBugReportInput, EndpointUncheckedCreateWithoutBugReportInput>
    where?: EndpointWhereInput
  }

  export type EndpointUpdateToOneWithWhereWithoutBugReportInput = {
    where?: EndpointWhereInput
    data: XOR<EndpointUpdateWithoutBugReportInput, EndpointUncheckedUpdateWithoutBugReportInput>
  }

  export type EndpointUpdateWithoutBugReportInput = {
    id?: StringFieldUpdateOperationsInput | string
    url?: StringFieldUpdateOperationsInput | string
    headers?: StringFieldUpdateOperationsInput | string
    body?: StringFieldUpdateOperationsInput | string
    interval?: IntFieldUpdateOperationsInput | number
    isBugged?: BoolFieldUpdateOperationsInput | boolean
    app?: AppUpdateOneRequiredWithoutEndpointNestedInput
    EndpointCall?: EndpointCallUpdateManyWithoutEndpointNestedInput
  }

  export type EndpointUncheckedUpdateWithoutBugReportInput = {
    id?: StringFieldUpdateOperationsInput | string
    appId?: StringFieldUpdateOperationsInput | string
    url?: StringFieldUpdateOperationsInput | string
    headers?: StringFieldUpdateOperationsInput | string
    body?: StringFieldUpdateOperationsInput | string
    interval?: IntFieldUpdateOperationsInput | number
    isBugged?: BoolFieldUpdateOperationsInput | boolean
    EndpointCall?: EndpointCallUncheckedUpdateManyWithoutEndpointNestedInput
  }

  export type AppCreateManyDeveloperInput = {
    id?: string
  }

  export type AppUpdateWithoutDeveloperInput = {
    id?: StringFieldUpdateOperationsInput | string
    Endpoint?: EndpointUpdateManyWithoutAppNestedInput
  }

  export type AppUncheckedUpdateWithoutDeveloperInput = {
    id?: StringFieldUpdateOperationsInput | string
    Endpoint?: EndpointUncheckedUpdateManyWithoutAppNestedInput
  }

  export type AppUncheckedUpdateManyWithoutDeveloperInput = {
    id?: StringFieldUpdateOperationsInput | string
  }

  export type EndpointCreateManyAppInput = {
    id?: string
    url: string
    headers: string
    body: string
    interval: number
    isBugged: boolean
  }

  export type EndpointUpdateWithoutAppInput = {
    id?: StringFieldUpdateOperationsInput | string
    url?: StringFieldUpdateOperationsInput | string
    headers?: StringFieldUpdateOperationsInput | string
    body?: StringFieldUpdateOperationsInput | string
    interval?: IntFieldUpdateOperationsInput | number
    isBugged?: BoolFieldUpdateOperationsInput | boolean
    EndpointCall?: EndpointCallUpdateManyWithoutEndpointNestedInput
    BugReport?: BugReportUpdateManyWithoutEndpointNestedInput
  }

  export type EndpointUncheckedUpdateWithoutAppInput = {
    id?: StringFieldUpdateOperationsInput | string
    url?: StringFieldUpdateOperationsInput | string
    headers?: StringFieldUpdateOperationsInput | string
    body?: StringFieldUpdateOperationsInput | string
    interval?: IntFieldUpdateOperationsInput | number
    isBugged?: BoolFieldUpdateOperationsInput | boolean
    EndpointCall?: EndpointCallUncheckedUpdateManyWithoutEndpointNestedInput
    BugReport?: BugReportUncheckedUpdateManyWithoutEndpointNestedInput
  }

  export type EndpointUncheckedUpdateManyWithoutAppInput = {
    id?: StringFieldUpdateOperationsInput | string
    url?: StringFieldUpdateOperationsInput | string
    headers?: StringFieldUpdateOperationsInput | string
    body?: StringFieldUpdateOperationsInput | string
    interval?: IntFieldUpdateOperationsInput | number
    isBugged?: BoolFieldUpdateOperationsInput | boolean
  }

  export type EndpointCallCreateManyEndpointInput = {
    id?: string
    date: Date | string
    duration: number
    status_code: number
    status: string
  }

  export type BugReportCreateManyEndpointInput = {
    id?: string
    report_date?: Date | string
    solve_date: Date | string
    details: string
  }

  export type EndpointCallUpdateWithoutEndpointInput = {
    id?: StringFieldUpdateOperationsInput | string
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    duration?: IntFieldUpdateOperationsInput | number
    status_code?: IntFieldUpdateOperationsInput | number
    status?: StringFieldUpdateOperationsInput | string
  }

  export type EndpointCallUncheckedUpdateWithoutEndpointInput = {
    id?: StringFieldUpdateOperationsInput | string
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    duration?: IntFieldUpdateOperationsInput | number
    status_code?: IntFieldUpdateOperationsInput | number
    status?: StringFieldUpdateOperationsInput | string
  }

  export type EndpointCallUncheckedUpdateManyWithoutEndpointInput = {
    id?: StringFieldUpdateOperationsInput | string
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    duration?: IntFieldUpdateOperationsInput | number
    status_code?: IntFieldUpdateOperationsInput | number
    status?: StringFieldUpdateOperationsInput | string
  }

  export type BugReportUpdateWithoutEndpointInput = {
    id?: StringFieldUpdateOperationsInput | string
    report_date?: DateTimeFieldUpdateOperationsInput | Date | string
    solve_date?: DateTimeFieldUpdateOperationsInput | Date | string
    details?: StringFieldUpdateOperationsInput | string
  }

  export type BugReportUncheckedUpdateWithoutEndpointInput = {
    id?: StringFieldUpdateOperationsInput | string
    report_date?: DateTimeFieldUpdateOperationsInput | Date | string
    solve_date?: DateTimeFieldUpdateOperationsInput | Date | string
    details?: StringFieldUpdateOperationsInput | string
  }

  export type BugReportUncheckedUpdateManyWithoutEndpointInput = {
    id?: StringFieldUpdateOperationsInput | string
    report_date?: DateTimeFieldUpdateOperationsInput | Date | string
    solve_date?: DateTimeFieldUpdateOperationsInput | Date | string
    details?: StringFieldUpdateOperationsInput | string
  }



  /**
   * Aliases for legacy arg types
   */
    /**
     * @deprecated Use DevCountOutputTypeDefaultArgs instead
     */
    export type DevCountOutputTypeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = DevCountOutputTypeDefaultArgs<ExtArgs>
    /**
     * @deprecated Use AppCountOutputTypeDefaultArgs instead
     */
    export type AppCountOutputTypeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = AppCountOutputTypeDefaultArgs<ExtArgs>
    /**
     * @deprecated Use EndpointCountOutputTypeDefaultArgs instead
     */
    export type EndpointCountOutputTypeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = EndpointCountOutputTypeDefaultArgs<ExtArgs>
    /**
     * @deprecated Use DevDefaultArgs instead
     */
    export type DevArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = DevDefaultArgs<ExtArgs>
    /**
     * @deprecated Use AppDefaultArgs instead
     */
    export type AppArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = AppDefaultArgs<ExtArgs>
    /**
     * @deprecated Use EndpointDefaultArgs instead
     */
    export type EndpointArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = EndpointDefaultArgs<ExtArgs>
    /**
     * @deprecated Use EndpointCallDefaultArgs instead
     */
    export type EndpointCallArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = EndpointCallDefaultArgs<ExtArgs>
    /**
     * @deprecated Use BugReportDefaultArgs instead
     */
    export type BugReportArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = BugReportDefaultArgs<ExtArgs>

  /**
   * Batch Payload for updateMany & deleteMany & createMany
   */

  export type BatchPayload = {
    count: number
  }

  /**
   * DMMF
   */
  export const dmmf: runtime.BaseDMMF
}